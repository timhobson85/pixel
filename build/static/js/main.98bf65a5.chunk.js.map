{"version":3,"sources":["components/ColorPicker.js","firebase.js","components/WebcamPage.js","components/SaveImage.js","components/ChatBox.js","components/PixelGrid.js","components/Gallery.js","components/TestCanvas.js","App.js","serviceWorker.js","index.js"],"names":["ColorPicker","state","displayColorPicker","color","props","disableAlpha","sendColorData","setState","hex","showColorPicker","className","id","style","backgroundColor","this","onClick","onChange","onChangeComplete","onMouseLeave","React","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","WebcamPage","image","webcamShow","setRef","webcam","capture","imageSrc","getScreenshot","setTimeout","pixelate","takeAnother","componentDidUpdate","console","log","database","ref","remove","c","refs","canvas","ctx","getContext","img1","webcamImage","w","width","h","height","drawImage","pixelArr","getImageData","data","y","x","p","fillStyle","fillRect","firebaseSetPixel","set","update","Math","random","r","row","col","showWebCam","cancelClick","audio","screenshotFormat","videoConstraints","facingMode","minScreenshotHeight","minScreenshotWidth","src","SaveImage","artist","title","dataURL","saveImageShow","handleChange","e","target","name","value","saveImage","saveCanvas","saveImageImage","imageData","length","imgsrc","toDataURL","downloadClick","a","document","createElement","href","download","click","uploadClick","push","showSaveImage","getImageShow","placeholder","type","ChatBox","message","chatlog","firstMessage","handleKeyDown","key","messageBox","firebaseMessageListen","on","snapshot","val","chatBoxArray","unshift","map","onKeyDown","PixelGrid","mouseDown","firstDraw","eyeDropperActive","activateEyeDropper","paintClick","event","firebaseSetLastDraw","paintMouseOver","setMouseDown","setMouseUp","firebaseLastDrawListen","firebasePaint","firebaseGridWasUpdatedListen","getPhotoFromFirebase","newImage","cloneDeep","splice","once","then","pixels","pix","Object","values","output","Array","fill","el","i","firebaseEmptyGrid","colorPickerData","turnOffWebcam","history","j","paddingBottom","onMouseDown","onMouseOver","onMouseUp","Gallery","images","artworks","artwork","reverse","alt","TestCanvas","drawPixel","clickOnCanvas","rect","getBoundingClientRect","floor","pageX","left","pageY","top","mouseUp","mouseMove","onMouseMove","App","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.98bf65a5.chunk.js","sourcesContent":["import React from 'react'\nimport { SketchPicker } from 'react-color';\nimport './css/ColorPicker.css'\n\n\nclass ColorPicker extends React.Component {\n\n  state = {\n    displayColorPicker: false,\n    color: this.props.color,\n    disableAlpha: true,\n  };\n\n  sendColorData = ( color ) => {\n    this.setState({ color : color.hex})\n    this.props.sendColorData(this.state.color)\n  }\n\n  showColorPicker = () => {\n    let displayColorPicker = this.state.displayColorPicker\n    this.setState({ displayColorPicker : !displayColorPicker })\n  }\n\n\n  render(){\n    return(\n      <div className='colorPickerButton'>\n        <button\n          id=\"colorPickerButton\"\n          style={{\n            backgroundColor:`${this.props.color}`\n          }}\n          onClick={this.showColorPicker}\n          >\n          {\n            this.state.displayColorPicker ?\n            'hide'\n            :\n            'pick a color'\n          }\n        </button>\n        {\n          this.state.displayColorPicker ?\n          <SketchPicker\n            color={this.state.color}\n            onChange={this.sendColorData}\n            onChangeComplete={ this.sendColorData}\n            disableAlpha={this.state.disableAlpha}\n            onMouseLeave={this.showColorPicker}\n          />\n          :\n          ''\n        }\n      </div>\n    )\n  }\n\n} // Class\n\nexport default ColorPicker\n","import firebase from 'firebase';\n\nconst config = {\n  apiKey: \"AIzaSyBCSiijuJoNKrO4nN5pYo2oXvMHQI92ohg\",\n  authDomain: \"pixel-54176.firebaseapp.com\",\n  databaseURL: \"https://pixel-54176.firebaseio.com\",\n  projectId: \"pixel-54176\",\n  storageBucket: \"pixel-54176.appspot.com\",\n  messagingSenderId: \"342090218102\",\n  appId: \"1:342090218102:web:75891e1b2670bca2693d57\",\n  measurementId: \"G-MF6VM6L27K\"\n};\nfirebase.initializeApp(config);\nexport default firebase;\n","import React from 'react'\nimport Webcam from 'react-webcam'\nimport firebase from '../firebase.js'\nimport './css/WebcamPage.css'\n\n\nclass WebcamPage extends React.Component {\n\n  state = {\n    image: '',\n    webcamShow: false\n  };\n\n  setRef = webcam => {\n    this.webcam = webcam;\n  };\n\n  capture = () => {\n    const imageSrc = this.webcam.getScreenshot();\n    this.setState({ image: imageSrc }, () => {\n      // this waits for the image to render before it runs the pixelate method.\n      setTimeout(() => this.pixelate(), 0)\n    });\n    this.setState({ webcamShow: false });\n    // this.props.turnOffWebcam()\n  };\n\n  takeAnother = () => {\n    this.setState({ image: null })\n  };\n\n  componentDidUpdate = () => {\n  };\n\n  pixelate = () => {\n    console.log('clearing database');\n    firebase.database().ref('/grid').remove();\n    let c = this.refs.canvas;\n    let ctx = c.getContext(\"2d\");\n    let img1 = this.refs.webcamImage;\n    console.log('canvas', c);\n    console.log('ctx', ctx);\n    console.log('img1', img1);\n\n    let w = img1.width;\n    let h = img1.height;\n\n    c.width = w;\n    c.height = h;\n    ctx.drawImage(img1, 0, 0);\n\n    var pixelArr = ctx.getImageData(0, 0, w, h).data;\n    let sample_size = 1;\n\n    for (let y = 0; y < h; y += sample_size) {\n      for (let x = 0; x < w; x += sample_size) {\n        let p = (x + (y*w)) * 4;\n        ctx.fillStyle = \"rgba(\" + pixelArr[p] + \",\" + pixelArr[p + 1] + \",\" + pixelArr[p + 2] + \",\" + pixelArr[p + 3] + \")\";\n        ctx.fillRect(x, y, sample_size, sample_size);\n        this.firebaseSetPixel( x, y, ctx.fillStyle );\n        // console.log(x, y, ctx.fillStyle);\n\n      }\n    }\n    console.log('redraw grid here');\n    firebase.database().ref(`/gridWasUpdated`).set({\n      update: Math.random() // firebase.database.ServerValue.TIMESTAMP\n     });\n     // don't need to push when it's component\n     // this.props.history.push(`/PixelGrid`)\n  }\n\n  firebaseSetPixel = (r, c, color) => {\n    console.log('sending to firebase');\n    firebase.database().ref(`/grid/${r}-${c}`).set({\n      row: r,\n      col: c,\n      color: color\n    });\n  }\n  //\n  showWebCam = () => {\n    this.setState({ webcamShow: true});\n  }\n\n  cancelClick = () => {\n    this.setState({ webcamShow: false });\n  }\n\n  render() {\n    const videoConstraints = {\n      width: 128,\n      height: 72,\n      facingMode: \"user\"\n    };\n\n    return (\n      <div className=\"webcamPage\">\n        <button onClick={this.showWebCam}>take photo</button>\n        {\n          this.state.webcamShow &&\n          <div className=\"webcamPopUp\">\n          <div>\n            <Webcam\n              className=\"showWebCam\"\n              audio={false}\n              height={720}\n              ref={this.setRef}\n              screenshotFormat=\"image/jpeg\"\n              width={1280}\n              videoConstraints={videoConstraints}\n              minScreenshotHeight={72}\n              minScreenshotWidth={128}\n              />\n            <br/>\n            <button onClick={this.capture}>Capture photo</button>\n            <button onClick={this.cancelClick}>cancel</button>\n            <br/>\n          </div>\n          </div>\n        }\n        <canvas ref=\"canvas\" width={128} height={72} className=\"hidden\" />\n        <img ref=\"webcamImage\" src={this.state.image} className=\"hidden\"/>\n      </div>\n\n    );\n  }\n} // Class\n\nexport default WebcamPage\n","import React from 'react'\nimport './css/SaveImage.css'\nimport firebase from '../firebase.js'\n\nclass SaveImage extends React.Component {\n\n  state = {\n    image : this.props.image,\n    artist: 'anonymous',\n    title: 'untitled',\n    dataURL: '',\n    saveImageShow: false,\n  }\n\n  componentDidMount(){\n    this.saveImage()\n  }\n\n  handleChange = (e) => {\n    this.setState({ [e.target.name] : e.target.value })\n  }\n\n  saveImage = () => {\n    console.log('saves');\n    let c = this.refs.saveCanvas;\n    let ctx = c.getContext(\"2d\");\n    let img1 = this.refs.saveImageImage;\n    // console.log('canvas', c);\n    // console.log('ctx', ctx);\n    // console.log('img1', img1);\n    let w = img1.width;\n    let h = img1.height;\n    // c.width = w;\n    c.width = 1280;\n    // c.height = h;\n    c.height = 720;\n    let imageData = this.props.image\n    // console.log(imageData);\n    for (var y = 0; y < imageData.length; y++) {\n      // console.log(imageData[y]) // rows\n      for (var x = 0; x < imageData[y].length; x++) {\n        // console.log(imageData[y][x]) // colomns ( pixls )\n        ctx.fillStyle = imageData[y][x]\n        ctx.fillRect( x*10, y*10, 10, 10)\n      }\n    }\n\n    // console.log(c.toDataURL('image/png'));\n    let imgsrc = c.toDataURL('image/png');\n    img1.src = imgsrc\n    this.setState({ dataURL: imgsrc })\n  }\n\n  downloadClick = () => {\n    console.log('download');\n    const data = this.refs.saveCanvas.toDataURL('image/png');\n    const a = document.createElement('a');\n    a.href = data;\n    a.download = `${this.state.artist}-${this.state.title}.png`;\n    a.click();\n  }\n\n  uploadClick = () => {\n    // console.log('upload');\n    // console.log(this.refs.saveCanvas.toDataURL('image/png'))\n    const { artist, title, dataURL } = this.state\n    // console.log( artist, title, dataURL );\n    firebase.database().ref(`/gallery/`).push({\n      artist,\n      title,\n      dataURL\n    })\n    this.props.push('/gallery')\n  }\n\n  showSaveImage = () => {\n    this.setState({ showSaveImage: true })\n    this.saveImage();\n  }\n\n  cancelClick = () => {\n    this.setState({ showSaveImage: false})\n    this.props.getImageShow()\n  }\n\n\n  render(){\n    return(\n      <div className=\"saveImagePage\">\n        <canvas\n          ref=\"saveCanvas\"\n          width={1280} height={720} className=\"saveImageCanvas\"\n          />\n        <img\n          ref=\"saveImageImage\"\n          src={this.state.image}\n          className=\"saveImageImage hidden\"\n          />\n        <div className=\"saveImage\">\n        <label>artist</label>\n        <input\n          name=\"artist\"\n          onChange={this.handleChange}\n          placeholder={this.state.artist}\n          type=\"text\"\n          /><br/>\n        <label>title</label>\n        <input\n          name=\"title\"\n          onChange={this.handleChange}\n          placeholder={this.state.title}\n          type=\"text\"\n          /><br/>\n          <button onClick={this.uploadClick}>upload</button><button onClick={this.downloadClick}>download</button> <br/>\n          <button onClick={this.cancelClick}>cancel</button>\n      </div>\n    </div>\n    )\n  }\n\n} // Class\n\nexport default SaveImage\n","import React from 'react'\nimport firebase from '../firebase.js'\nimport './css/ChatBox.css'\n\nlet counter = 0;\n\nclass ChatBox extends React.Component {\n\n  state = {\n    message: '',\n    chatlog: [],\n    firstMessage: true,\n  }\n\n  componentDidMount(){\n    this.firebaseMessageListen();\n  }\n\n  handleKeyDown = (e) => {\n    if ( e.key === 'Enter' ) {\n      console.log('enter pressed');\n      firebase.database().ref('/messages/').set({\n        update: Math.random(), //firebase.database.ServerValue.TIMESTAMP,\n        message: this.state.message\n      })\n      // this.setState({ message: ''})\n      this.refs.messageBox.value='';\n    }\n  }\n\n  firebaseMessageListen = () => {\n    console.log('%cLISTENER SET UP', 'font-size: 16pt');\n    let listen = firebase.database().ref('/messages');\n    listen.on('value', (snapshot) => {\n      let data = snapshot.val();\n      if (this.state.firstMessage === false) {\n        console.log(data);\n        let chatBoxArray = [...this.state.chatlog]\n        chatBoxArray.unshift(data.message)\n        this.setState({ chatlog: chatBoxArray})\n      }\n      this.setState({firstMessage: false})\n    })\n  }\n\n  handleChange = (e) => {\n    this.setState({ [e.target.name]: e.target.value })\n  }\n\n  render(){\n    return(\n      <div className='chatBox'>\n        <div className=\"chatMessages\">\n        {\n          this.state.chatlog.length > 0 ?\n          this.state.chatlog.map( message =>\n            <p>{message}</p>\n          )\n          :\n          ''\n        }\n        </div>\n      <input\n        ref=\"messageBox\"\n        type=\"text\"\n        name=\"message\"\n        onKeyDown={this.handleKeyDown}\n        onChange={this.handleChange}\n        />\n      </div>\n    )\n  }\n\n} // Class\n\nexport default ChatBox\n","import React from 'react'\nimport './css/PixelGrid.css';\nimport { cloneDeep } from 'lodash'\nimport ColorPicker from './ColorPicker'\nimport firebase from '../firebase.js'\nimport WebcamPage from './WebcamPage'\nimport SaveImage from './SaveImage'\nimport ChatBox from './ChatBox'\n\n// i can take away state changes?!\n\nclass PixelGrid extends React.Component {\n\n  state = {\n    image: [],\n    row: 72,\n    col: 128,\n    color: \"rebeccapurple\",\n    mouseDown: false,\n    firstDraw: true,\n    eyeDropperActive: false,\n    webcamShow: false,\n    saveImageShow: false,\n  };\n\n  componentDidMount() {\n    this.firebaseLastDrawListen();\n    this.firebaseGridWasUpdatedListen()\n    this.getPhotoFromFirebase();\n  };\n\n  activateEyeDropper = () => {\n    this.setState({\n      eyeDropperActive: true\n    });\n  };\n\n  paintClick = (r, c, event) => {\n    if (this.state.eyeDropperActive) {\n      this.setState({\n        color: event.target.style.backgroundColor,\n        eyeDropperActive: false\n      });\n    } else {\n    // let newImage = [...this.state.image]; // this is a shallow copy - use deep copy with lodash\n    // let newImage = cloneDeep(this.state.image);\n    // newImage[r].splice(c, 1, this.state.color );\n    // this.setState({\n      // image: newImage\n    // });\n    this.firebaseSetLastDraw( r, c );\n    this.firebaseSetPixel( r, c );\n    }\n  };\n\n  paintMouseOver = (r, c) => {\n    if (this.state.mouseDown) {\n      this.firebaseSetLastDraw( r, c, this.state.color);\n      this.firebaseSetPixel( r, c )\n      // let newImage = cloneDeep(this.state.image);\n      // newImage[r].splice(c, 1, this.state.color);\n      // this.setState({\n      //   image: newImage\n      // });\n    };\n  };\n\n  setMouseDown = (r, c) => {\n    // let newImage = cloneDeep(this.state.image);\n    // newImage[r].splice(c, 1, this.state.color );\n    this.firebaseSetLastDraw( r, c, this.state.color);\n    this.firebaseSetPixel( r, c );\n    // this.setState({\n    //   image: newImage\n    // });\n    this.setState({ mouseDown: true});\n  };\n\n  setMouseUp = () => {\n    this.setState({ mouseDown: false});\n  };\n\n  firebaseSetLastDraw = (r, c) => {\n    firebase.database().ref('/lastDraw').set({\n      row: r,\n      col: c,\n      color: this.state.color\n    });\n  };\n\n  firebaseSetPixel = (c, r) => {\n    firebase.database().ref(`/grid/${r}-${c}`).set({\n      row: r,\n      col: c,\n      color: this.state.color\n    });\n  };\n\n  firebaseLastDrawListen = () => {\n    let listen = firebase.database().ref('/lastDraw');\n    listen.on('value', (snapshot) => {\n      let data = snapshot.val();\n      if (this.state.firstDraw === false) {\n        this.firebasePaint( data.row, data.col, data.color );\n      };\n      this.setState({ firstDraw: false });\n    });\n  };\n\n  firebaseGridWasUpdatedListen = () => {\n    let listen = firebase.database().ref('/gridWasUpdated');\n    listen.on('value', (snapshot) => {\n      let data = snapshot.val()\n      // console.log('firebaseListen', data.row, data.col);\n      // console.log(data);\n      this.getPhotoFromFirebase()\n    })\n  }\n\n  firebasePaint = ( r, c, color ) => {\n    let newImage = cloneDeep(this.state.image);\n    newImage[r].splice(c, 1, color )\n    this.setState({\n      image: newImage\n    });\n  };\n\n  getPhotoFromFirebase = () => {\n    firebase.database().ref('/grid').once('value')\n    // .then((pixels) => console.log(pixels.val()))\n    .then((pixels) => {\n      const pix = Object.values( pixels.val() );\n      const output = Array(72).fill(null).map( el => new Array(128) );\n      let rows = 72; let cols = 128;\n      for(let i = 0; i < pix.length; i++){\n        const {row, col, color} = pix[i];\n          output[col][row] = color;\n      };\n      this.setState({ image: output });\n    });\n  };\n\n  firebaseEmptyGrid = () => {\n    firebase.database().ref('/grid').remove();\n  };\n\n  colorPickerData = ( data ) => {\n    this.setState({ color : data});\n  };\n\n  saveImageShow = () => {\n    this.setState({ saveImageShow: true})\n  }\n\n  showWebCam = () => {\n    this.setState({ webcamShow: !this.state.webcamShow })\n  }\n  turnOffWebcam = () => {\n    this.setState({ webcamShow: false })\n  }\n\n  getImageShow = () => {\n    this.setState({ saveImageShow: false })\n  }\n\n  render(){\n\n    const { image } = this.state;\n\n    return(\n      <div className='App'>\n        {\n          this.state.saveImageShow && <SaveImage\n          push={this.props.history.push}\n          image={this.state.image}\n          getImageShow={this.getImageShow}\n        />\n        }\n        {\n          this.state.image.length > 1 ?\n          <div className=\"pixelWrapper\">\n          <div\n            className=\"pixelGrid\"\n            onMouseLeave={this.setMouseUp}\n          >\n          {\n          image.map((row, i) => (\n            <div\n              className=\"row\"\n              style={{\n                height: `${100 / image[i].length}%`\n              }}\n              >\n              {\n                row.map( (color, j ) => (\n                  <div\n                    className=\"pixel\"\n                    style={{\n                      backgroundColor: image[i][j] || 'rgb(70, 70, 70)',\n                      width: `${100 / image[i].length}%`,\n                      paddingBottom: `${100 / image[i].length}%`\n                    }}\n                    onClick={(e) => this.paintClick(i, j, e)}\n                    onMouseDown={() => this.setMouseDown(i, j)}\n                    onMouseOver={() => this.paintMouseOver(i, j)}\n                    onMouseUp={this.setMouseUp}\n                    />)\n                  )\n                }\n              </div>\n            ))\n          }\n          </div>\n\n\n          </div>\n\n          :\n          <p>loading...</p>\n        }\n        <div className='toolBox'>\n          <WebcamPage />\n          <button onClick={this.saveImageShow}>save image</button>\n          <button\n            onClick={this.activateEyeDropper}\n            className=\"eyedropperButton\"\n          >\n          eyedropper</button>\n          <ColorPicker\n            color={this.state.color}\n            sendColorData={this.colorPickerData}\n            />\n        </div>\n        <br/>\n        <br/>\n        <ChatBox />\n      </div>\n    )\n  }\n} // Class\n\nexport default PixelGrid\n\n// row/col inputs\n// <h4>testinput</h4>\n// <label>row</label>\n// <input type=\"number\" min=\"1\" max=\"128\" name=\"row\" defaultValue={this.state.row} onChange={this.handleChangeSelect}/>\n// <label>col</label>\n// <input type=\"number\" min=\"1\" max=\"128\" name=\"col\" defaultValue={this.state.col} onChange={this.handleChangeSelect}/>\n// <h4>endtestinput</h4>\n// <label> row </label>\n// <input type=\"text\" name=\"row\" onChange={this.handleChange} /> <br/>\n// <label> col </label>\n// <input type=\"text\" name=\"col\" onChange={this.handleChange} /> <br/>\n// <button onClick={this.createGrid}>click</button> <br/>\n\n// handleChange = (e) => {\n//   this.setState({ [e.target.name] : e.target.value })\n// }\n//\n// handleChangeSelect = (e) => {\n//   console.log(this.state.row, this.state.col);\n//   this.setState({ [e.target.name] : e.target.value })\n//   let image = []\n//   for (var i = 0; i < this.state.row; i++) {\n//     image[i] = []\n//     for (var j = 0; j < this.state.col; j++) {\n//       image[i][j] =  null\n//     }\n//   }\n//   this.setState({ image })\n// }\n\n// createGrid = () => {\n//   console.log(this.state.row, this.state.col);\n//   let image = []\n//   for (var i = 0; i < this.state.row; i++) {\n//     image[i] = []\n//     for (var j = 0; j < this.state.col; j++) {\n//       image[i][j] =  null\n//       // this.firebaseSetPixel( i, j ) // this was to seed grid\n//     }\n//   }\n//   this.setState({ image })\n// }\n\n\n// click and drag draw handlers\n// onMouseDown={() => this.setMouseDown(i, j)}\n// onMouseOver={() => this.paintMouseOver(i, j)}\n// onMouseUp={this.setMouseUp}\n","import React from 'react'\nimport firebase from '../firebase.js'\nimport './css/Gallery.css'\n\nclass Gallery extends React.Component {\n\n  state = {\n    images : null\n  }\n\n  componentDidMount(){\n    firebase.database().ref('/gallery').once('value')\n    .then((artworks) => {\n      const artwork = Object.values( artworks.val() );\n      this.setState({ images: artwork.reverse() })\n    })\n  }\n\n  render(){\n    return(\n      <div className='gallery'>\n        <h2>Gallery</h2>\n        <br/>\n        <div>\n          {\n            this.state.images ?\n            this.state.images.map( image =>\n              <div className=\"artwork\">\n                <h2>\n                  Artist: {image.artist}\n                </h2>\n                <h2>\n                  Title: {image.title}\n                </h2>\n                <br/>\n                <img src={image.dataURL} alt=\"\"/>\n              </div>\n            )\n            :\n            <p>no</p>\n          }\n        </div>\n      </div>\n    )\n  }\n\n}; // Class\n\nexport default Gallery;\n","import React from 'react'\nimport firebase from '../firebase.js'\n\nclass TestCanvas extends React.Component {\n\n  state = {\n    image: null,\n    firstDraw: true,\n    mouseDown: false,\n  }\n\n\n  componentDidMount(){\n    firebase.database().ref('/grid').once('value')\n    // .then((pixels) => console.log(pixels.val()))\n    .then((pixels) => {\n      const pix = Object.values( pixels.val() );\n      const output = Array(72).fill(null).map( el => new Array(128) );\n      let rows = 72; let cols = 128;\n      for(let i = 0; i < pix.length; i++){\n        const {row, col, color} = pix[i];\n          output[col][row] = color;\n      };\n      this.setState({ image: output });\n      this.saveImage()\n    });\n    this.firebaseLastDrawListen()\n  }\n\n  saveImage = () => {\n    console.log('saves');\n    let c = this.refs.saveCanvas;\n    let ctx = c.getContext(\"2d\");;\n    c.width = 1280;\n    c.height = 720;\n    let imageData = this.state.image\n    for (var y = 0; y < imageData.length; y++) {\n      // console.log(imageData[y]) // rows\n      for (var x = 0; x < imageData[y].length; x++) {\n        // console.log(imageData[y][x]) // colomns ( pixls )\n        ctx.fillStyle = imageData[y][x]\n        ctx.fillRect( x*10, y*10, 10, 10)\n      }\n    }\n  }\n\n  drawPixel = (row, col, color) => {\n    let c = this.refs.saveCanvas;\n    let ctx = c.getContext(\"2d\");;\n    ctx.fillStyle = color\n    // ctx.fillStyle = imageData[y][x]\n    // y = rows\n    // x = cols\n    // ctx.fillRect( x*10, y*10, 10, 10)\n    ctx.fillRect( col*10, row*10, 10, 10)\n  }\n\n  firebaseLastDrawListen = () => {\n    let listen = firebase.database().ref('/lastDraw');\n    listen.on('value', (snapshot) => {\n      let data = snapshot.val();\n      if (this.state.firstDraw === false) {\n        // this.firebasePaint( data.row, data.col, data.color );\n        this.drawPixel( data.row, data.col, data.color );\n      };\n      this.setState({ firstDraw: false });\n    });\n  };\n\n  firebaseSetPixel = (c, r) => {\n    firebase.database().ref(`/grid/${r}-${c}`).set({\n      row: r,\n      col: c,\n      color: 'red'\n    });\n  };\n\n  clickOnCanvas = (e) => {\n    console.log('click');\n    let can = this.refs.saveCanvas;\n    let rect = can.getBoundingClientRect()\n    let c = Math.floor( (e.pageX - rect.left)/10)\n    let r = Math.floor( (e.pageY - rect.top )/10)\n    firebase.database().ref('/lastDraw').set({\n      row: r,\n      col: c,\n      color: 'red'\n    });\n    this.firebaseSetPixel( r, c )\n  }\n\n  mouseDown = (e) => {\n    console.log('mouseDown');\n    this.setState({ mouseDown: true })\n  }\n\n  mouseUp = (e) => {\n    console.log('mouseUp');\n    this.setState({mouseDown:false})\n  }\n\n  mouseMove = (e) => {\n    if (this.state.mouseDown) {\n      console.log('mouseMovemouseDownTrue');\n      let can = this.refs.saveCanvas;\n      let rect = can.getBoundingClientRect()\n      let c = Math.floor( (e.pageX - rect.left)/10)\n      let r = Math.floor( (e.pageY - rect.top )/10)\n      firebase.database().ref('/lastDraw').set({\n        row: r,\n        col: c,\n        color: 'red'\n      });\n      this.firebaseSetPixel( r, c )\n    } else {\n      console.log('mouseMovemouseDownFalse');\n    }\n  }\n\n\n  render(){\n    return(\n      <div className='App'>\n          <canvas\n            ref=\"saveCanvas\"\n            width={1280}\n            height={720}\n            className=\"saveImageCanvas\"\n            onClick={this.clickOnCanvas}\n            onMouseDown={this.mouseDown}\n            onMouseMove={this.mouseMove}\n            onMouseUp={this.mouseUp}\n            />\n      </div>\n    )\n  }\n\n} // Class\n\nexport default TestCanvas\n","import React from 'react';\nimport './App.css';\nimport {\n  Route,\n  Link,\n  HashRouter as Router\n} from 'react-router-dom'\nimport PixelGrid from './components/PixelGrid'\nimport Gallery from './components/Gallery'\nimport WebcamPage from './components/WebcamPage'\nimport TestCanvas from './components/TestCanvas'\n\n\nclass App extends React.Component {\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Router>\n        <Link to=\"/gallery\">\n          <button id=\"galleryButton\">gallery</button>\n        </Link>\n        <Link to=\"/TestCanvas\">\n          <button id=\"TestCanvasButton\">TestCanvas</button>\n        </Link>\n        <Link to=\"/\">\n          <button id=\"pixelGridButton\">pixelgrid</button>\n        </Link>\n        <Link to=\"/webcam\">\n          <button id=\"webCamButton\">webcam</button>\n        </Link>\n        <Route exact path=\"/\" component={PixelGrid} />\n        <Route exact path=\"/webcam\" component={WebcamPage} />\n        <Route exact path=\"/gallery\" component={Gallery} />\n        <Route exact path=\"/TestCanvas\" component={TestCanvas} />\n        </Router>\n      </div>\n    )\n  }\n\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}