{"version":3,"sources":["components/ColorPicker.js","firebase.js","components/WebcamPage.js","components/SaveImage.js","components/PixelGrid.js","components/Gallery.js","App.js","serviceWorker.js","index.js"],"names":["ColorPicker","state","displayColorPicker","color","props","disableAlpha","sendColorData","setState","hex","showColorPicker","className","id","style","backgroundColor","this","onClick","onChange","onChangeComplete","onMouseLeave","React","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","WebcamPage","image","webcamShow","setRef","webcam","capture","imageSrc","getScreenshot","setTimeout","pixelate","takeAnother","componentDidMount","console","log","database","ref","remove","c","refs","canvas","ctx","getContext","img1","webcamImage","w","width","h","height","drawImage","pixelArr","getImageData","data","y","x","p","fillStyle","fillRect","firebaseSetPixel","set","update","ServerValue","TIMESTAMP","r","row","col","showWebCam","audio","screenshotFormat","videoConstraints","facingMode","minScreenshotHeight","minScreenshotWidth","src","SaveImage","artist","title","dataURL","handleChange","e","target","name","value","saveImage","saveCanvas","saveImageImage","imageData","length","imgsrc","toDataURL","downloadClick","a","document","createElement","href","download","click","uploadClick","push","placeholder","type","PixelGrid","mouseDown","firstDraw","eyeDropperActive","activateEyeDropper","paintClick","event","newImage","cloneDeep","splice","firebaseSetLastDraw","paintMouseOver","setMouseDown","setMouseUp","firebaseLastDrawListen","on","snapshot","val","firebasePaint","firebaseGridWasUpdatedListen","getPhotoFromFirebase","once","then","pixels","pix","Object","values","output","Array","fill","map","el","i","firebaseEmptyGrid","colorPickerData","takeNewPhoto","j","paddingBottom","onMouseDown","onMouseOver","onMouseUp","history","Gallery","images","artworks","artwork","alt","App","handleGalleryClick","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ba9cf527.chunk.js","sourcesContent":["import React from 'react'\nimport { SketchPicker } from 'react-color';\nimport './ColorPicker.css'\n\n\nclass ColorPicker extends React.Component {\n\n  state = {\n    displayColorPicker: false,\n    color: this.props.color,\n    disableAlpha: true,\n  };\n\n  sendColorData = ( color ) => {\n    this.setState({ color : color.hex})\n    this.props.sendColorData(this.state.color)\n  }\n\n  showColorPicker = () => {\n    let displayColorPicker = this.state.displayColorPicker\n    this.setState({ displayColorPicker : !displayColorPicker })\n  }\n\n\n  render(){\n    return(\n      <div className='colorPickerButton'>\n        <button\n          id=\"colorPickerButton\"\n          style={{\n            backgroundColor:`${this.props.color}`\n          }}\n          onClick={this.showColorPicker}\n          >\n          {\n            this.state.displayColorPicker ?\n            'hide'\n            :\n            'pick a color'\n          }\n        </button>\n        {\n          this.state.displayColorPicker ?\n          <SketchPicker\n            color={this.state.color}\n            onChange={this.sendColorData}\n            onChangeComplete={ this.sendColorData}\n            disableAlpha={this.state.disableAlpha}\n            onMouseLeave={this.showColorPicker}\n          />\n          :\n          ''\n        }\n      </div>\n    )\n  }\n\n} // Class\n\nexport default ColorPicker\n","import firebase from 'firebase';\n\nconst config = {\n  apiKey: \"AIzaSyBCSiijuJoNKrO4nN5pYo2oXvMHQI92ohg\",\n  authDomain: \"pixel-54176.firebaseapp.com\",\n  databaseURL: \"https://pixel-54176.firebaseio.com\",\n  projectId: \"pixel-54176\",\n  storageBucket: \"pixel-54176.appspot.com\",\n  messagingSenderId: \"342090218102\",\n  appId: \"1:342090218102:web:75891e1b2670bca2693d57\",\n  measurementId: \"G-MF6VM6L27K\"\n};\nfirebase.initializeApp(config);\nexport default firebase;\n","import React from 'react'\nimport Webcam from 'react-webcam'\nimport firebase from '../firebase.js'\nimport './WebcamPage.css'\n\n\nclass WebcamPage extends React.Component {\n\n  state = {\n    image: '',\n    webcamShow: false,\n  };\n\n  setRef = webcam => {\n    this.webcam = webcam;\n  };\n\n  capture = () => {\n    const imageSrc = this.webcam.getScreenshot();\n    this.setState({ image: imageSrc }, () => {\n      // this waits for the image to render before it runs the pixelate method.\n      setTimeout(() => this.pixelate(), 0)\n    });\n    this.setState({ webcamShow: false });\n  };\n\n  takeAnother = () => {\n    this.setState({ image: null })\n  };\n\n  componentDidMount = () => {\n  };\n\n  pixelate = () => {\n    console.log('clearing database');\n    firebase.database().ref('/grid').remove();\n    let c = this.refs.canvas;\n    let ctx = c.getContext(\"2d\");\n    let img1 = this.refs.webcamImage;\n    console.log('canvas', c);\n    console.log('ctx', ctx);\n    console.log('img1', img1);\n\n    let w = img1.width;\n    let h = img1.height;\n\n    c.width = w;\n    c.height = h;\n    ctx.drawImage(img1, 0, 0);\n\n    var pixelArr = ctx.getImageData(0, 0, w, h).data;\n    let sample_size = 1;\n\n    for (let y = 0; y < h; y += sample_size) {\n      for (let x = 0; x < w; x += sample_size) {\n        let p = (x + (y*w)) * 4;\n        ctx.fillStyle = \"rgba(\" + pixelArr[p] + \",\" + pixelArr[p + 1] + \",\" + pixelArr[p + 2] + \",\" + pixelArr[p + 3] + \")\";\n        ctx.fillRect(x, y, sample_size, sample_size);\n        this.firebaseSetPixel( x, y, ctx.fillStyle );\n        // console.log(x, y, ctx.fillStyle);\n\n      }\n    }\n    console.log('redraw grid here');\n    firebase.database().ref(`/gridWasUpdated`).set({\n      update: firebase.database.ServerValue.TIMESTAMP\n     });\n     // don't need to push when it's component\n     // this.props.history.push(`/PixelGrid`)\n  }\n\n  firebaseSetPixel = (r, c, color) => {\n    console.log('sending to firebase');\n    firebase.database().ref(`/grid/${r}-${c}`).set({\n      row: r,\n      col: c,\n      color: color\n    });\n  }\n\n  showWebCam = () => {\n    this.setState({ webcamShow: true})\n  }\n\n\n  render() {\n    const videoConstraints = {\n      width: 100,\n      height: 40,\n      facingMode: \"user\"\n    };\n\n    return (\n      <div className=\"webcamPage\">\n        <button id=\"takePhotoButton\" onClick={this.showWebCam}>take a photo</button>\n        <div>\n        {\n          this.state.webcamShow &&\n          <div>\n            <Webcam\n              className=\"showWebCam\"\n              audio={false}\n              height={400}\n              ref={this.setRef}\n              screenshotFormat=\"image/jpeg\"\n              width={1000}\n              videoConstraints={videoConstraints}\n              minScreenshotHeight={40}\n              minScreenshotWidth={100}\n              />\n            <br/>\n            <button onClick={this.capture}>Capture photo</button>\n            <br/>\n          </div>\n        }\n        <canvas ref=\"canvas\" width={100} height={40} className=\"hidden\" />\n        <img ref=\"webcamImage\" src={this.state.image} className=\"hidden\"/>\n        </div>\n      </div>\n\n    );\n  }\n} // Class\n\nexport default WebcamPage\n","import React from 'react'\nimport './SaveImage.css'\nimport firebase from '../firebase.js'\n\nclass SaveImage extends React.Component {\n\n  state = {\n    image : this.props.image,\n    artist: 'anonymous',\n    title: 'untitled',\n    dataURL: ''\n  }\n\n  handleChange = (e) => {\n    this.setState({ [e.target.name] : e.target.value })\n  }\n\n  saveImage = () => {\n    console.log('saves');\n    let c = this.refs.saveCanvas;\n    let ctx = c.getContext(\"2d\");\n    let img1 = this.refs.saveImageImage;\n    // console.log('canvas', c);\n    // console.log('ctx', ctx);\n    // console.log('img1', img1);\n    let w = img1.width;\n    let h = img1.height;\n    // c.width = w;\n    c.width = 1000;\n    // c.height = h;\n    c.height = 400;\n    let imageData = this.props.image\n    // console.log(imageData);\n    for (var y = 0; y < imageData.length; y++) {\n      // console.log(imageData[y]) // rows\n      for (var x = 0; x < imageData[y].length; x++) {\n        // console.log(imageData[y][x]) // colomns ( pixls )\n        ctx.fillStyle = imageData[y][x]\n        ctx.fillRect( x*10, y*10, 10, 10)\n      }\n    }\n\n    // console.log(c.toDataURL('image/png'));\n    let imgsrc = c.toDataURL('image/png');\n    img1.src = imgsrc\n    this.setState({ dataURL: imgsrc })\n  }\n\n  downloadClick = () => {\n    console.log('download');\n    const data = this.refs.saveCanvas.toDataURL('image/png');\n    const a = document.createElement('a');\n    a.href = data;\n    a.download = 'image.png';\n    a.click();\n  }\n\n  uploadClick = () => {\n    // console.log('upload');\n    // console.log(this.refs.saveCanvas.toDataURL('image/png'))\n    const { artist, title, dataURL } = this.state\n    // console.log( artist, title, dataURL );\n    firebase.database().ref(`/gallery/`).push({\n      artist,\n      title,\n      dataURL\n    })\n    this.props.push('/gallery')\n  }\n\n\n  render(){\n    return(\n      <div className='saveImage'>\n        <br/>\n        <canvas ref=\"saveCanvas\" width={1000} height={400} className=\"saveImageCanvas\" />\n        <img ref=\"saveImageImage\" src={this.state.image} className=\"saveImageImage\"/>\n        <button onClick={this.downloadClick}>download</button> <br/>\n        <label>artist</label>\n        <input\n          name=\"artist\"\n          onChange={this.handleChange}\n          placeholder={this.state.artist}\n          type=\"text\"\n          /><br/>\n        <label>title</label>\n        <input\n          name=\"title\"\n          onChange={this.handleChange}\n          placeholder={this.state.title}\n          type=\"text\"\n          /><br/>\n\n        <button onClick={this.uploadClick}>upload</button>\n        <button onClick={this.saveImage}>save image</button>\n      </div>\n    )\n  }\n\n} // Class\n\nexport default SaveImage\n","import React from 'react'\nimport './PixelGrid.css';\nimport { cloneDeep } from 'lodash'\nimport ColorPicker from './ColorPicker'\nimport firebase from '../firebase.js'\nimport WebcamPage from './WebcamPage'\nimport SaveImage from './SaveImage'\n\n\nclass PixelGrid extends React.Component {\n  state = {\n    image: [],\n    row: 40,\n    col: 100,\n    color: \"#000000\",\n    mouseDown: false,\n    firstDraw: true,\n    eyeDropperActive: false,\n    webcamShow: false\n  };\n\n  componentDidMount() {\n    this.firebaseLastDrawListen();\n    this.firebaseGridWasUpdatedListen()\n    this.getPhotoFromFirebase();\n  };\n\n  activateEyeDropper = () => {\n    this.setState({\n      eyeDropperActive: true\n    });\n  };\n\n  paintClick = (r, c, event) => {\n    if (this.state.eyeDropperActive) {\n      this.setState({\n        color: event.target.style.backgroundColor,\n        eyeDropperActive: false\n      });\n    } else {\n    // let newImage = [...this.state.image]; // this is a shallow copy - use deep copy with lodash\n    let newImage = cloneDeep(this.state.image);\n    newImage[r].splice(c, 1, this.state.color );\n    this.setState({\n      image: newImage\n    });\n    this.firebaseSetLastDraw( r, c );\n    this.firebaseSetPixel( r, c );\n    }\n  };\n\n  paintMouseOver = (r, c) => {\n    if (this.state.mouseDown) {\n      this.firebaseSetLastDraw( r, c, this.state.color);\n      this.firebaseSetPixel( r, c )\n      let newImage = cloneDeep(this.state.image);\n      newImage[r].splice(c, 1, this.state.color);\n      this.setState({\n        image: newImage\n      });\n    };\n  };\n\n  setMouseDown = (r, c) => {\n    let newImage = cloneDeep(this.state.image);\n    newImage[r].splice(c, 1, this.state.color );\n    this.firebaseSetLastDraw( r, c, this.state.color);\n    this.firebaseSetPixel( r, c );\n    this.setState({\n      image: newImage\n    });\n    this.setState({ mouseDown: true});\n  };\n\n  setMouseUp = () => {\n    this.setState({ mouseDown: false});\n  };\n\n  // firebaseSetPixel = (r, c, color) => {\n    // console.log('sending to firebase');\n    // firebase.database().ref(`/grid/${r}-${c}`).set({\n    //   row: r,\n    //   col: c,\n    //   color: color\n    // });\n  // }\n\n  firebaseSetLastDraw = (r, c) => {\n    firebase.database().ref('/lastDraw').set({\n      row: r,\n      col: c,\n      color: this.state.color\n    });\n  };\n\n  firebaseSetPixel = (c, r) => {\n    firebase.database().ref(`/grid/${r}-${c}`).set({\n      row: r,\n      col: c,\n      color: this.state.color\n    });\n  };\n\n  firebaseLastDrawListen = () => {\n    let listen = firebase.database().ref('/lastDraw');\n    listen.on('value', (snapshot) => {\n      let data = snapshot.val();\n      if (this.state.firstDraw === false) {\n        this.firebasePaint( data.row, data.col, data.color );\n      };\n      this.setState({ firstDraw: false });\n    });\n  };\n\n  firebaseGridWasUpdatedListen = () => {\n    let listen = firebase.database().ref('/gridWasUpdated');\n    listen.on('value', (snapshot) => {\n      let data = snapshot.val()\n      // console.log('firebaseListen', data.row, data.col);\n      // console.log(data);\n      this.getPhotoFromFirebase()\n    })\n  }\n\n  firebasePaint = ( r, c, color ) => {\n    let newImage = cloneDeep(this.state.image);\n    newImage[r].splice(c, 1, color )\n    this.setState({\n      image: newImage\n    });\n  };\n\n  getPhotoFromFirebase = () => {\n    firebase.database().ref('/grid').once('value')\n    // .then((pixels) => console.log(pixels.val()))\n    .then((pixels) => {\n      const pix = Object.values( pixels.val() );\n      const output = Array(40).fill(null).map( el => new Array(100) );\n      let rows = 40; let cols = 100;\n      for(let i = 0; i < pix.length; i++){\n        const {row, col, color} = pix[i];\n          output[col][row] = color;\n      };\n      this.setState({ image: output });\n    });\n  };\n\n  firebaseEmptyGrid = () => {\n    firebase.database().ref('/grid').remove();\n  };\n\n  colorPickerData = ( data ) => {\n    this.setState({ color : data});\n  };\n\n  takeNewPhoto = () => {\n    this.setState({ webcamShow: false })\n  }\n\n\n  render(){\n\n    const { image } = this.state;\n\n    return(\n      <div className='App'>\n        <WebcamPage />\n        {\n          this.state.image.length > 1 ?\n          <div className=\"pixelWrapper\">\n          <div\n            className=\"pixelGrid\"\n            onMouseLeave={this.setMouseUp}\n          >\n          {\n          image.map((row, i) => (\n            <div\n              className=\"row\"\n              style={{\n                height: `${100 / image[i].length}%`\n              }}\n              >\n              {\n                row.map( (color, j ) => (\n                  <div\n                    className=\"pixel\"\n                    style={{\n                      backgroundColor: image[i][j] || 'rgb(70, 70, 70)',\n                      width: `${100 / image[i].length}%`,\n                      paddingBottom: `${100 / image[i].length}%`\n                    }}\n                    onClick={(e) => this.paintClick(i, j, e)}\n                    onMouseDown={() => this.setMouseDown(i, j)}\n                    onMouseOver={() => this.paintMouseOver(i, j)}\n                    onMouseUp={this.setMouseUp}\n                    onMouseUp={this.setMouseUp}\n                    />)\n                  )\n                }\n              </div>\n            ))\n          }\n          </div>\n          <ColorPicker\n            color={this.state.color}\n            sendColorData={this.colorPickerData}\n            />\n          <button\n            onClick={this.activateEyeDropper}\n            className=\"eyedropperButton\"\n          >\n          eyedropper</button>\n          </div>\n\n          :\n          <p>loading...</p>\n        }\n\n        <br/>\n        <br/>\n        <SaveImage\n          push={this.props.history.push}\n          image={this.state.image}\n        />\n      </div>\n    )\n  }\n} // Class\n\nexport default PixelGrid\n\n// row/col inputs\n// <h4>testinput</h4>\n// <label>row</label>\n// <input type=\"number\" min=\"1\" max=\"100\" name=\"row\" defaultValue={this.state.row} onChange={this.handleChangeSelect}/>\n// <label>col</label>\n// <input type=\"number\" min=\"1\" max=\"100\" name=\"col\" defaultValue={this.state.col} onChange={this.handleChangeSelect}/>\n// <h4>endtestinput</h4>\n// <label> row </label>\n// <input type=\"text\" name=\"row\" onChange={this.handleChange} /> <br/>\n// <label> col </label>\n// <input type=\"text\" name=\"col\" onChange={this.handleChange} /> <br/>\n// <button onClick={this.createGrid}>click</button> <br/>\n\n// handleChange = (e) => {\n//   this.setState({ [e.target.name] : e.target.value })\n// }\n//\n// handleChangeSelect = (e) => {\n//   console.log(this.state.row, this.state.col);\n//   this.setState({ [e.target.name] : e.target.value })\n//   let image = []\n//   for (var i = 0; i < this.state.row; i++) {\n//     image[i] = []\n//     for (var j = 0; j < this.state.col; j++) {\n//       image[i][j] =  null\n//     }\n//   }\n//   this.setState({ image })\n// }\n\n// createGrid = () => {\n//   console.log(this.state.row, this.state.col);\n//   let image = []\n//   for (var i = 0; i < this.state.row; i++) {\n//     image[i] = []\n//     for (var j = 0; j < this.state.col; j++) {\n//       image[i][j] =  null\n//       // this.firebaseSetPixel( i, j ) // this was to seed grid\n//     }\n//   }\n//   this.setState({ image })\n// }\n\n\n// click and drag draw handlers\n// onMouseDown={() => this.setMouseDown(i, j)}\n// onMouseOver={() => this.paintMouseOver(i, j)}\n// onMouseUp={this.setMouseUp}\n","import React from 'react'\nimport firebase from '../firebase.js'\nimport './Gallery.css'\n\nclass Gallery extends React.Component {\n\n  state = {\n    images : null\n  }\n\n  componentDidMount(){\n    firebase.database().ref('/gallery').once('value')\n    .then((artworks) => {\n      const artwork = Object.values( artworks.val() );\n      this.setState({ images: artwork})\n    })\n  }\n\n  render(){\n    return(\n      <div className='gallery'>\n        <h2>Gallery</h2>\n        <br/>\n        <div>\n          {\n            this.state.images ?\n            this.state.images.map( image =>\n              <div className=\"artwork\">\n                <h2>\n                  Artist: {image.artist}\n                </h2>\n                <h2>\n                  Title: {image.title}\n                </h2>\n                <br/>\n                <img src={image.dataURL} alt=\"\"/>\n              </div>\n            )\n            :\n            <p>no</p>\n          }\n        </div>\n      </div>\n    )\n  }\n\n}; // Class\n\nexport default Gallery;\n","import React from 'react';\nimport './App.css';\nimport {\n  Route,\n  Link,\n  HashRouter as Router\n} from 'react-router-dom'\nimport PixelGrid from './components/PixelGrid'\nimport Gallery from './components/Gallery'\n\n\nclass App extends React.Component {\n\n\n  handleGalleryClick = () => {\n    // console.log('galleryClick');\n    // this.history.push('/gallery')\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Router>\n        <Link to=\"/gallery\">\n          <button id=\"galleryButton\">gallery</button>\n        </Link>\n        <Link to=\"/pixelgrid\">\n          <button id=\"pixelGridButton\">pixelgrid</button>\n        </Link>\n        <Route exact path=\"/gallery\" component={Gallery} />\n        <Route exact path=\"/pixelgrid\" component={PixelGrid} />\n        </Router>\n      </div>\n    )\n  }\n\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}