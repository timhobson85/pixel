{"version":3,"sources":["components/ColorPicker.js","firebase.js","components/PixelGrid.js","components/Chat.js","components/WebcamPage.js","components/Pixelate.js","components/CanvasTest.js","App.js","serviceWorker.js","index.js"],"names":["ColorPicker","state","displayColorPicker","color","r","g","b","a","disableAlpha","onChange","console","log","rgb","setState","className","this","React","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","PixelGrid","image","row","col","mouseDown","firstDraw","handleChange","e","target","name","value","handleChangeSelect","i","j","createGrid","paintClick","c","newImage","cloneDeep","splice","firebaseSet","paintMouseOver","setColor","setEraser","setMouseDown","setMouseUp","testFirebase","test","database","ref","once","then","data","val","set","firebaseSetPixel","testFirebaseListen","on","snapshot","firebasePaint","firebaseGridListen","getPhotoFromFirebase","pixels","pix","Object","values","output","Array","fill","map","el","length","firebaseEmptyGrid","remove","consoleLogState","onMouseLeave","style","height","backgroundColor","width","paddingBottom","onClick","onMouseDown","onMouseOver","onMouseUp","type","min","max","defaultValue","Chat","username","message","push","timestamp","ServerValue","TIMESTAMP","onSubmit","preventDefault","testMessagesGet","forEach","snap","action","WebcamPage","setRef","webcam","capture","imageSrc","getScreenshot","takeAnother","componentDidMount","pixelate","refs","canvas","ctx","getContext","img1","webcamImage","w","h","drawImage","pixelArr","getImageData","y","x","p","fillStyle","fillRect","audio","screenshotFormat","videoConstraints","facingMode","minScreenshotHeight","minScreenshotWidth","src","Pixelate","CanvasTest","clickOnCanvas","pageX","offsetX","buttonClick","id","App","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"+VAwCeA,E,2MAlCbC,MAAQ,CACNC,oBAAoB,EACpBC,MAAO,CACLC,EAAG,MACHC,EAAG,MACHC,EAAG,KACHC,EAAG,KAELC,cAAc,G,EAIhBC,SAAW,SAACN,GACVO,QAAQC,IAAIR,EAAMS,KACRT,EAAMS,IAChB,EAAKC,SAAS,CAAEV,MAAOA,K,wEAKvB,OACE,yBAAKW,UAAU,OACb,2CACA,kBAAC,eAAD,CACEL,SAAUM,KAAKN,SACfN,MAAOY,KAAKd,MAAME,MAClBK,aAAcO,KAAKd,MAAMO,oB,GA5BTQ,IAAMC,W,iBCQhCC,IAASC,cAVM,CACbC,OAAQ,0CACRC,WAAY,8BACZC,YAAa,qCACbC,UAAW,cACXC,cAAe,0BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGFT,QAAf,EC4ReU,E,2MAjSb3B,MAAQ,CACJ4B,MAAO,CACL,CAAE,UAAW,UAAW,UAAW,UAAW,UAAW,WACzD,CAAE,UAAW,UAAW,UAAW,UAAW,UAAW,WACzD,CAAE,UAAW,UAAW,UAAW,UAAW,UAAW,WACzD,CAAE,UAAW,UAAW,UAAW,UAAW,UAAW,WACzD,CAAE,UAAW,UAAW,UAAW,UAAW,UAAW,WACzD,CAAE,UAAW,UAAW,UAAW,UAAW,UAAW,YAE3DC,IAAK,GACLC,IAAK,IACL5B,MAAO,UACP6B,WAAW,EACXC,WAAW,G,EAebC,aAAe,SAACC,GACd,EAAKtB,SAAL,eAAiBsB,EAAEC,OAAOC,KAAQF,EAAEC,OAAOE,S,EAG7CC,mBAAqB,SAACJ,GACpBzB,QAAQC,IAAI,EAAKV,MAAM6B,IAAK,EAAK7B,MAAM8B,KACvC,EAAKlB,SAAL,eAAiBsB,EAAEC,OAAOC,KAAQF,EAAEC,OAAOE,QAE3C,IADA,IAAIT,EAAQ,GACHW,EAAI,EAAGA,EAAI,EAAKvC,MAAM6B,IAAKU,IAAK,CACvCX,EAAMW,GAAK,GACX,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAKxC,MAAM8B,IAAKU,IAClCZ,EAAMW,GAAGC,GAAM,KAGnB,EAAK5B,SAAS,CAAEgB,W,EAGlBa,WAAa,WAEXhC,QAAQC,IAAI,EAAKV,MAAM6B,IAAK,EAAK7B,MAAM8B,KAGvC,IADA,IAAIF,EAAQ,GACHW,EAAI,EAAGA,EAAI,EAAKvC,MAAM6B,IAAKU,IAAK,CACvCX,EAAMW,GAAK,GACX,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAKxC,MAAM8B,IAAKU,IAClCZ,EAAMW,GAAGC,GAAM,KAInB,EAAK5B,SAAS,CAAEgB,W,EAIlBc,WAAa,SAACvC,EAAGwC,GAMb,IAAIC,EAAWC,oBAAU,EAAK7C,MAAM4B,OAEpCgB,EAASzC,GAAG2C,OAAOH,EAAG,EAAG,EAAK3C,MAAME,OACpC,EAAKU,SAAS,CACZgB,MAAOgB,IAGX,EAAKG,YAAa5C,EAAGwC,I,EAKvBK,eAAiB,SAAC7C,EAAGwC,GACnB,GAAI,EAAK3C,MAAM+B,UAAW,CACxBtB,QAAQC,IAAI,EAAKV,MAAM+B,WACvBtB,QAAQC,IAAIP,EAAGwC,GACf,EAAKI,YAAa5C,EAAGwC,EAAG,EAAK3C,MAAME,OAKnC,IAAI0C,EAAWC,oBAAU,EAAK7C,MAAM4B,OAEpCgB,EAASzC,GAAG2C,OAAOH,EAAG,EAAG,EAAK3C,MAAME,OACpC,EAAKU,SAAS,CACZgB,MAAOgB,M,EAMbK,SAAW,SAACf,GACVzB,QAAQC,IAAIwB,EAAEC,OAAOE,OACrB,EAAKzB,SAAS,CAAEV,MAAQgC,EAAEC,OAAOE,S,EAGnCa,UAAY,WACV,EAAKtC,SAAS,CAAEV,MAAO,Q,EAKzBiD,aAAe,SAAChD,EAAGwC,GAEjB,IAAIC,EAAWC,oBAAU,EAAK7C,MAAM4B,OACpCnB,QAAQC,IAAIkC,GACZA,EAASzC,GAAG2C,OAAOH,EAAG,EAAG,EAAK3C,MAAME,OACpC,EAAKU,SAAS,CACZgB,MAAOgB,IAETnC,QAAQC,IAAI,QACZ,EAAKE,SAAS,CAAEmB,WAAW,K,EAE7BqB,WAAa,WACX3C,QAAQC,IAAI,MACZ,EAAKE,SAAS,CAAEmB,WAAW,K,EAG7BsB,aAAe,WACb,IAAIC,EAAOrC,EAASsC,WAAWC,IAAI,aAAaC,KAAK,SAClDC,MAAM,SAAAC,GAAI,OAAIlD,QAAQC,IAAI,OAAQiD,EAAKC,UAE1CnD,QAAQC,IAAI4C,I,EAGdP,YAAc,SAAC5C,EAAGwC,GAChB1B,EAASsC,WAAWC,IAAI,aAAaK,IAAI,CACvChC,IAAK1B,EACL2B,IAAKa,EACLzC,MAAO,EAAKF,MAAME,S,EAItB4D,iBAAmB,SAAC3D,EAAGwC,GACrB1B,EAASsC,WAAWC,IAApB,gBAAiCrD,GAAjC,OAAqCwC,IAAKkB,IAAI,CAC5ChC,IAAK1B,EACL2B,IAAKa,EACLzC,MAAO,EAAKF,MAAME,S,EAItB6D,mBAAqB,WACN9C,EAASsC,WAAWC,IAAI,aAC9BQ,GAAG,SAAS,SAACC,GAClB,IAAIN,EAAOM,EAASL,MAEpBnD,QAAQC,IAAIiD,IACiB,IAAzB,EAAK3D,MAAMgC,WACb,EAAKkC,cAAeP,EAAK9B,IAAK8B,EAAK7B,IAAK6B,EAAKzD,OAE/CO,QAAQC,IAAI,iBACZ,EAAKE,SAAS,CAAEoB,WAAW,Q,EAI/BmC,mBAAqB,a,EASrBD,cAAgB,SAAE/D,EAAGwC,EAAGzC,GACtB,IAAI0C,EAAWC,oBAAU,EAAK7C,MAAM4B,OACpCgB,EAASzC,GAAG2C,OAAOH,EAAG,EAAGzC,GACzB,EAAKU,SAAS,CACZgB,MAAOgB,K,EAIXwB,qBAAuB,WACrB3D,QAAQC,IAAI,SACZO,EAASsC,WAAWC,IAAI,SAASC,KAAK,SAEnCC,MAAK,SAACW,GAML,IAJA,IAAMC,EAAMC,OAAOC,OAAQH,EAAOT,OAC5Ba,EAASC,MAAM,IAAIC,KAAK,MAAMC,KAAK,SAAAC,GAAE,OAAI,IAAIH,MAAM,QAGjDnC,EAAI,EAAGA,EAAI+B,EAAIQ,OAAQvC,IAAI,CAAC,IAAD,EACP+B,EAAI/B,GAAvBV,EAD0B,EAC1BA,IAAKC,EADqB,EACrBA,IAAK5B,EADgB,EAChBA,MAEfuE,EAAO3C,GAAKD,GAAO3B,EAMvB,EAAKU,SAAS,CAAEgB,MAAO6C,Q,EAS7BM,kBAAoB,WAClB9D,EAASsC,WAAWC,IAAI,SAASwB,U,EAGnCC,gBAAkB,WAChBxE,QAAQC,IAAI,EAAKV,MAAM4B,Q,mFAnMvBd,KAAKiD,qBACLjD,KAAKqD,qBACLrD,KAAK2B,e,6HA2ME,IAAD,OACEb,EAAUd,KAAKd,MAAf4B,MACR,OACE,yBAAKf,UAAU,OACb,6CACA,yBACEA,UAAU,YACVqE,aAAcpE,KAAKsC,YAGjBxB,EAAMgD,KAAI,SAAC/C,EAAKU,GAAN,OACR,yBACE1B,UAAU,MACVsE,MAAO,CACLC,OAAO,GAAD,OAAK,IAAMxD,EAAMW,GAAGuC,OAApB,OAINjD,EAAI+C,KAAK,SAAC1E,EAAOsC,GAAR,OACP,yBACE3B,UAAU,QACVsE,MAAO,CACLE,gBAAiBzD,EAAMW,GAAGC,IAAM,kBAChC8C,MAAM,GAAD,OAAK,IAAM1D,EAAMW,GAAGuC,OAApB,KACLS,cAAc,GAAD,OAAK,IAAM3D,EAAMW,GAAGuC,OAApB,MAEfU,QAAS,kBAAM,EAAK9C,WAAWH,EAAGC,IAClCiD,YAAa,kBAAM,EAAKtC,aAAaZ,EAAGC,IACxCkD,YAAa,kBAAM,EAAK1C,eAAeT,EAAGC,IAC1CmD,UAAW,EAAKvC,qBAS9B,4BAAQoC,QAAS1E,KAAKuC,cAAtB,iBAnCF,IAmC6D,6BAC3D,4BAAQmC,QAAS1E,KAAKmE,iBAAtB,mBApCF,IAoCkE,6BAChE,4BAAQO,QAAS1E,KAAKiE,mBAAtB,aArCF,IAqC8D,6BAC5D,4BAAQS,QAAS1E,KAAKiC,aAAtB,eAtCF,IAsC0D,6BACxD,4BAAQyC,QAAS1E,KAAKiD,oBAAtB,sBAvCF,IAuCwE,6BACtE,4BAAQyB,QAAS1E,KAAKsD,sBAAtB,wBAxCF,IAwC4E,6BAC1E,yCACA,sCACA,2BAAOwB,KAAK,SAASC,IAAI,IAAIC,IAAI,MAAM1D,KAAK,MAAM2D,aAAcjF,KAAKd,MAAM6B,IAAKrB,SAAUM,KAAKwB,qBAC/F,sCACA,2BAAOsD,KAAK,SAASC,IAAI,IAAIC,IAAI,MAAM1D,KAAK,MAAM2D,aAAcjF,KAAKd,MAAM8B,IAAKtB,SAAUM,KAAKwB,qBAC/F,4CACA,wCACA,2BAAOsD,KAAK,OAAOxD,KAAK,MAAM5B,SAAUM,KAAKmB,eAhD/C,IAgDgE,6BAC9D,wCACA,2BAAO2D,KAAK,OAAOxD,KAAK,MAAM5B,SAAUM,KAAKmB,eAlD/C,IAkDgE,6BAC9D,4BAAQuD,QAAS1E,KAAK2B,YAAtB,SAnDF,IAmDmD,6BACjD,6BACA,4BAAQ+C,QAAS1E,KAAKmC,SAAUZ,MAAM,OAAtC,OACA,4BAAQmD,QAAS1E,KAAKmC,SAAUZ,MAAM,SAAtC,SACA,4BAAQmD,QAAS1E,KAAKmC,SAAUZ,MAAM,QAAtC,QACA,4BAAQmD,QAAS1E,KAAKoC,UAAWb,MAAM,mBAAvC,UACA,kBAAC,EAAD,MACA,kC,GA5RctB,IAAMC,WCwDfgF,E,2MA1DbhG,MAAQ,CACNiG,SAAW,KACXC,QAAS,I,EAGXjE,aAAe,SAACC,GACd,EAAKtB,SAAL,eAAiBsB,EAAEC,OAAOC,KAAQF,EAAEC,OAAOE,S,EAG7CmD,QAAU,SAACtD,GACTjB,EAASsC,WAAWC,IAAI,aAAa2C,KAAK,CACxCF,SAAU,EAAKjG,MAAMiG,SACrBC,QAAS,EAAKlG,MAAMkG,QACpBE,UAAWnF,EAASsC,SAAS8C,YAAYC,a,EAI7CC,SAAW,SAACrE,GACVA,EAAEsE,kB,EAGJC,gBAAkB,WAChBxF,EAASsC,WAAWC,IAAI,aAAaC,KAAK,SAEvCC,MAAK,SAASO,GACbA,EAASyC,SAAS,SAAAC,GAChBlG,QAAQC,IAAIiG,EAAK/C,c,wEAMvB,OACE,yBAAK/C,UAAU,OACb,oCAEEC,KAAKd,MAAMiG,SACX,2BAAInF,KAAKd,MAAMiG,UAEf,6BACE,0BAAMM,SAAUzF,KAAKyF,SAAUK,OAAO,IACpC,2BAAOhB,KAAK,OAAOpF,SAAUM,KAAKmB,aAAcG,KAAK,aACrD,4BAAQA,KAAK,WAAWoD,QAAS1E,KAAK0E,SAAtC,oBAIN,2BAAOI,KAAK,OAAOpF,SAAUM,KAAKmB,aAAcG,KAAK,aACrD,4BAAQA,KAAK,WAAWoD,QAAS1E,KAAK0E,SAAtC,kBACC1E,KAAKd,MAAMiG,SAfd,IAewB,6BACtB,2BAAOL,KAAK,OAAOpF,SAAUM,KAAKmB,aAAcG,KAAK,YACrD,4BAAQoD,QAAS1E,KAAK0E,SAAtB,aAjBF,IAiBoD,6BAClD,4BAAQA,QAAS1E,KAAK2F,iBAAtB,8B,GArDW1F,IAAMC,W,kBCyJV6F,E,2MArJb7G,MAAQ,CACN4B,MAAO,I,EAGTkF,OAAS,SAAAC,GACL,EAAKA,OAASA,G,EAGlBC,QAAU,WAER,IAAMC,EAAW,EAAKF,OAAOG,gBAE7B,EAAKtG,SAAS,CAAEgB,MAAOqF,K,EAIzBE,YAAc,WACZ,EAAKvG,SAAS,CAAEgB,MAAO,Q,EAGzBwF,kBAAoB,a,EAyBpBC,SAAW,WACTpG,EAASsC,WAAWC,IAAI,SAASwB,SACjC,IAAIrC,EAAI,EAAK2E,KAAKC,OACdC,EAAM7E,EAAE8E,WAAW,MACnBC,EAAO,EAAKJ,KAAKK,YACrBlH,QAAQC,IAAI,SAAUiC,GACtBlC,QAAQC,IAAI,MAAO8G,GACnB/G,QAAQC,IAAI,OAAQgH,GAEpB,IAAIE,EAAIF,EAAKpC,MAETuC,EAAIH,EAAKtC,OAEbzC,EAAE2C,MAAQsC,EACVjF,EAAEyC,OAASyC,EACXL,EAAIM,UAAUJ,EAAM,EAAG,GAKvB,IAHA,IAAIK,EAAWP,EAAIQ,aAAa,EAAG,EAAGJ,EAAGC,GAAGlE,KAGnCsE,EAAI,EAAGA,EAAIJ,EAAGI,GAFL,EAGhB,IAAK,IAAIC,EAAI,EAAGA,EAAIN,EAAGM,GAHP,EAGyB,CACvC,IAAIC,EAAkB,GAAbD,EAAKD,EAAEL,GAChBJ,EAAIY,UAAY,QAAUL,EAASI,GAAK,IAAMJ,EAASI,EAAI,GAAK,IAAMJ,EAASI,EAAI,GAAK,IAAMJ,EAASI,EAAI,GAAK,IAChHX,EAAIa,SAASH,EAAGD,EANF,KAOd,EAAKnE,iBAAkBoE,EAAGD,EAAGT,EAAIY,a,EA4BvCtE,iBAAmB,SAAC3D,EAAGwC,EAAGzC,GACxBO,QAAQC,IAAI,uBACZO,EAASsC,WAAWC,IAApB,gBAAiCrD,EAAjC,YAAsCwC,IAAKkB,IAAI,CAC7ChC,IAAK1B,EACL2B,IAAKa,EACLzC,MAAOA,K,wEAYT,OACE,6BACE,4CAEEY,KAAKd,MAAM4B,MACX,6BACA,6BACA,4BAAQ4D,QAAS1E,KAAKqG,aAAtB,gBACA,4BAAQ3B,QAAS1E,KAAKuG,UAAtB,aAGA,6BACA,kBAAC,IAAD,CACEiB,OAAO,EACPlD,OAAQ,IACR5B,IAAK1C,KAAKgG,OACVyB,iBAAiB,aACjBjD,MAAO,IACPkD,iBAxBiB,CACvBlD,MAAO,IACPF,OAAQ,GACRqD,WAAY,QAsBNC,oBAAqB,GACrBC,mBAAoB,MAEtB,6BACA,4BAAQnD,QAAS1E,KAAKkG,SAAtB,iBACA,8BAGF,4BAAQxD,IAAI,SAAS8B,MAAO,IAAKF,OAAQ,KACzC,yBAAK5B,IAAI,cAAcoF,IAAK9H,KAAKd,MAAM4B,MAAOf,UAAU,gB,GAjJvCE,IAAMC,WC4ChB6H,E,iLATX,OACE,yBAAKhI,UAAU,OACb,6C,GAxCeE,IAAMC,WCqCd8H,E,2MAnCb1B,kBAAoB,WAClB3G,QAAQC,IAAI,O,EAGdqI,cAAgB,SAAC7G,GACfzB,QAAQC,IAAIwB,EAAE8G,OACdvI,QAAQC,IAAIwB,EAAE+G,SACdxI,QAAQC,IAAIwB,I,EAGdgH,YAAc,WACZ,IACI1B,EADI,EAAKF,KAAKC,OACNE,WAAW,MACvBhH,QAAQC,IAAI8G,GACZ/G,QAAQC,IAAR,U,wEAIA,OACE,yBAAKG,UAAU,OACb,0CACA,4BACE2E,QAAS1E,KAAKiI,cACdI,GAAG,aACH3F,IAAI,SACJ8B,MAAO,IACPF,OAAQ,MAEV,4BAAQI,QAAS1E,KAAKoI,aAAtB,W,GA9BiBnI,IAAMC,WCoChBoI,MAxBf,WAEE,OACE,yBAAKvI,UAAU,OAAf,QAEA,kBAAC,IAAD,KACA,6BACE,kBAAC,IAAD,CAAMwI,GAAG,KAAT,QADF,SAEE,kBAAC,IAAD,CAAMA,GAAG,cAAT,aAFF,SAGE,kBAAC,IAAD,CAAMA,GAAG,SAAT,QAHF,SAIE,kBAAC,IAAD,CAAMA,GAAG,eAAT,cAJF,SAKE,kBAAC,IAAD,CAAMA,GAAG,aAAT,YALF,SAME,kBAAC,IAAD,CAAMA,GAAG,eAAT,cANF,UAQA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,aAAaC,UAAW7H,IAC1C,kBAAC,IAAD,CAAO2H,OAAK,EAACC,KAAK,QAAQC,UAAWxD,IACrC,kBAAC,IAAD,CAAOsD,OAAK,EAACC,KAAK,cAAcC,UAAW3C,IAC3C,kBAAC,IAAD,CAAOyC,OAAK,EAACC,KAAK,YAAYC,UAAWX,IACzC,kBAAC,IAAD,CAAOS,OAAK,EAACC,KAAK,cAAcC,UAAWV,OCpB3BW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1G,MAAK,SAAA2G,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/J,QAAQ+J,MAAMA,EAAMtE,c","file":"static/js/main.3f3c57df.chunk.js","sourcesContent":["import React from 'react'\nimport { SketchPicker } from 'react-color';\n\n\nclass ColorPicker extends React.Component {\n\n  state = {\n    displayColorPicker: false,\n    color: {\n      r: '241',\n      g: '112',\n      b: '19',\n      a: '1',\n    },\n    disableAlpha: true,\n  };\n\n\n  onChange = (color) => {\n    console.log(color.rgb);\n    let rbg = color.rgb\n    this.setState({ color: color})\n  }\n\n\n  render(){\n    return(\n      <div className='App'>\n        <h2>ColorPicker</h2>\n        <SketchPicker\n          onChange={this.onChange}\n          color={this.state.color}\n          disableAlpha={this.state.disableAlpha}\n        />\n      </div>\n    )\n  }\n\n} // Class\n\nexport default ColorPicker\n","import firebase from 'firebase';\n\nconst config = {\n  apiKey: \"AIzaSyBCSiijuJoNKrO4nN5pYo2oXvMHQI92ohg\",\n  authDomain: \"pixel-54176.firebaseapp.com\",\n  databaseURL: \"https://pixel-54176.firebaseio.com\",\n  projectId: \"pixel-54176\",\n  storageBucket: \"pixel-54176.appspot.com\",\n  messagingSenderId: \"342090218102\",\n  appId: \"1:342090218102:web:75891e1b2670bca2693d57\",\n  measurementId: \"G-MF6VM6L27K\"\n};\nfirebase.initializeApp(config);\nexport default firebase;\n","import React from 'react'\nimport './PixelGrid.css';\nimport { cloneDeep } from 'lodash'\nimport ColorPicker from './ColorPicker'\nimport firebase from '../firebase.js'\n\n\nclass PixelGrid extends React.Component {\n  state = {\n      image: [\n        [ '#000000', '#000000', '#000000', '#000000', '#000000', '#000000'  ],\n        [ '#000000', '#ff0000', '#000000', '#000000', '#ff0000', '#000000'  ],\n        [ '#000000', '#000000', '#000000', '#000000', '#000000', '#000000'  ],\n        [ '#000000', '#ff0000', '#000000', '#000000', '#ff0000', '#000000'  ],\n        [ '#000000', '#ff0000', '#ff0000', '#ff0000', '#ff0000', '#000000'  ],\n        [ '#000000', '#000000', '#000000', '#000000', '#000000', '#000000'  ],\n      ],\n      row: 40,\n      col: 100,\n      color: \"#000000\",\n      mouseDown: false,\n      firstDraw: true,\n    }\n\n    componentDidMount() {\n      this.testFirebaseListen()\n      this.firebaseGridListen()\n      this.createGrid()\n    }\n    componentDidUpdate() {\n    }\n\n    componentWillUnmount(){\n\n    }\n\n    handleChange = (e) => {\n      this.setState({ [e.target.name] : e.target.value })\n    }\n\n    handleChangeSelect = (e) => {\n      console.log(this.state.row, this.state.col);\n      this.setState({ [e.target.name] : e.target.value })\n      let image = []\n      for (var i = 0; i < this.state.row; i++) {\n        image[i] = []\n        for (var j = 0; j < this.state.col; j++) {\n          image[i][j] =  null\n        }\n      }\n      this.setState({ image })\n    }\n\n    createGrid = () => {\n      // let total = this.state.row * this.state.col\n      console.log(this.state.row, this.state.col);\n      // this.setState({pixels: Array(total).fill(null)})\n      let image = []\n      for (var i = 0; i < this.state.row; i++) {\n        image[i] = []\n        for (var j = 0; j < this.state.col; j++) {\n          image[i][j] =  null\n          // this.firebaseSetPixel( i, j ) // this was to seed grid\n        }\n      }\n      this.setState({ image })\n      // set width here too\n    }\n\n    paintClick = (r, c) => {\n      // if (document.body.onmousedown) {\n        // console.log(r, c);\n        // console.log(this.state.image[r][c])\n        // this is a shallow copy - use deep copy with lodash\n        // let newImage = [...this.state.image];\n        let newImage = cloneDeep(this.state.image);\n        // console.log(newImage);\n        newImage[r].splice(c, 1, this.state.color )\n        this.setState({\n          image: newImage\n        })\n      // }\n      this.firebaseSet( r, c )\n      // this.firebaseSetPixel( r, c )\n      // this.setState({ image[r][c] : '#FFFFFF' })\n    }\n\n    paintMouseOver = (r, c) => {\n      if (this.state.mouseDown) {\n        console.log(this.state.mouseDown);\n        console.log(r, c);\n        this.firebaseSet( r, c, this.state.color)\n        // console.log(this.state.image[r][c])\n        // this is a shallow copy - use deep copy with lodash\n        // let newImage = this.state.image\n        // let newImage = [...this.state.image];\n        let newImage = cloneDeep(this.state.image);\n        // console.log(newImage);\n        newImage[r].splice(c, 1, this.state.color)\n        this.setState({\n          image: newImage\n        })\n      }\n      // this.setState({ image[r][c] : '#FFFFFF' })\n    }\n\n    setColor = (e) => {\n      console.log(e.target.value);\n      this.setState({ color : e.target.value })\n    }\n\n    setEraser = () => {\n      this.setState({ color: null })\n    }\n\n    // onMouseDown={() => this.paintClick(i, j)}\n\n    setMouseDown = (r, c) => {\n      // let newImage = this.state.image\n      let newImage = cloneDeep(this.state.image);\n      console.log(newImage);\n      newImage[r].splice(c, 1, this.state.color )\n      this.setState({\n        image: newImage\n      })\n      console.log('down');\n      this.setState({ mouseDown: true})\n    };\n    setMouseUp = () => {\n      console.log('up');\n      this.setState({ mouseDown: false})\n    };\n\n    testFirebase = () => {\n      let test = firebase.database().ref('/lastDraw').once('value')\n        .then( data => console.log('data', data.val()  ) );\n\n      console.log(test);\n    };\n\n    firebaseSet = (r, c) => {\n      firebase.database().ref('/lastDraw').set({\n        row: r,\n        col: c,\n        color: this.state.color\n      });\n    }\n\n    firebaseSetPixel = (r, c) => {\n      firebase.database().ref(`/grid/${r}${c}`).set({\n        row: r,\n        col: c,\n        color: this.state.color\n      });\n    }\n\n    testFirebaseListen = () => {\n      let listen = firebase.database().ref('/lastDraw');\n      listen.on('value', (snapshot) => {\n        let data = snapshot.val()\n        // console.log('firebaseListen', data.row, data.col);\n        console.log(data);\n        if (this.state.firstDraw === false) {\n          this.firebasePaint( data.row, data.col, data.color )\n        }\n        console.log('first message');\n        this.setState({ firstDraw: false })\n      })\n    }\n\n    firebaseGridListen = () => {\n      // let listen = firebase.database().ref('/grid');\n      // listen.on('value', (snapshot) => {\n      //   let data = snapshot.val()\n      //   // console.log('firebaseListen', data.row, data.col);\n      //   console.log(data);\n      // })\n    }\n\n    firebasePaint = ( r, c, color ) => {\n      let newImage = cloneDeep(this.state.image);\n      newImage[r].splice(c, 1, color )\n      this.setState({\n        image: newImage\n      })\n    }\n\n    getPhotoFromFirebase = () => {\n      console.log('hello');\n      firebase.database().ref('/grid').once('value')\n      // .then((pixels) => console.log(pixels.val()))\n        .then((pixels) => {\n          // console.log('then');\n          const pix = Object.values( pixels.val() );\n          const output = Array(40).fill(null).map( el => new Array(100) );\n          let rows = 40; let cols = 100;\n          // console.log('pix', pix.length);\n          for(let i = 0; i < pix.length; i++){\n            const {row, col, color} = pix[i];\n            // if( row < rows && col < cols ){\n              output[col][row] = color;\n            // }\n             // const row = Math.floor(i/cols);\n             // const col = i % cols;\n          }\n          // console.log( output );\n          this.setState({ image: output });\n          // pixels.forEach( pixel => {\n          //   let p = pixel.val();\n          //   console.log(p);\n          //   // this.firebasePaint( p.col, p.row, p.color )\n          // })\n        });\n    }\n\n    firebaseEmptyGrid = () => {\n      firebase.database().ref('/grid').remove()\n    }\n\n    consoleLogState = () => {\n      console.log(this.state.image);\n    }\n\n    // click and drag draw handlers\n    // onMouseDown={() => this.setMouseDown(i, j)}\n    // onMouseOver={() => this.paintMouseOver(i, j)}\n    // onMouseUp={this.setMouseUp}\n\n\n\n    render(){\n      const { image } = this.state\n      return(\n        <div className='App'>\n          <h2>PixelCanvas02</h2>\n          <div\n            className=\"pixelGrid\"\n            onMouseLeave={this.setMouseUp}\n            >\n            {\n              image.map((row, i) => (\n                <div\n                  className=\"row\"\n                  style={{\n                    height: `${100 / image[i].length}%`\n                  }}\n                  >\n                  {\n                    row.map( (color, j ) => (\n                      <div\n                        className=\"pixel\"\n                        style={{\n                          backgroundColor: image[i][j] || 'rgb(70, 70, 70)',\n                          width: `${100 / image[i].length}%`,\n                          paddingBottom: `${100 / image[i].length}%`\n                        }}\n                        onClick={() => this.paintClick(i, j)}\n                        onMouseDown={() => this.setMouseDown(i, j)}\n                        onMouseOver={() => this.paintMouseOver(i, j)}\n                        onMouseUp={this.setMouseUp}\n\n                        />)\n                      )\n                    }\n                  </div>\n                ))\n              }\n            </div>\n          <button onClick={this.testFirebase}>test firebase</button> <br/>\n          <button onClick={this.consoleLogState}>consoleLogState</button> <br/>\n          <button onClick={this.firebaseEmptyGrid}>emptygrid</button> <br/>\n          <button onClick={this.firebaseSet}>firebaseSet</button> <br/>\n          <button onClick={this.testFirebaseListen}>testFirebaseListen</button> <br/>\n          <button onClick={this.getPhotoFromFirebase}>getPhotoFromFirebase</button> <br/>\n          <h4>testinput</h4>\n          <label>row</label>\n          <input type=\"number\" min=\"1\" max=\"100\" name=\"row\" defaultValue={this.state.row} onChange={this.handleChangeSelect}/>\n          <label>col</label>\n          <input type=\"number\" min=\"1\" max=\"100\" name=\"col\" defaultValue={this.state.col} onChange={this.handleChangeSelect}/>\n          <h4>endtestinput</h4>\n          <label> row </label>\n          <input type=\"text\" name=\"row\" onChange={this.handleChange} /> <br/>\n          <label> col </label>\n          <input type=\"text\" name=\"col\" onChange={this.handleChange} /> <br/>\n          <button onClick={this.createGrid}>click</button> <br/>\n          <br/>\n          <button onClick={this.setColor} value=\"red\">red</button>\n          <button onClick={this.setColor} value=\"black\">black</button>\n          <button onClick={this.setColor} value=\"blue\">blue</button>\n          <button onClick={this.setEraser} value='rgb(70, 70, 70)'>eraser</button>\n          <ColorPicker />\n          <br/>\n        </div>\n      )\n    }\n} // Class\n\nexport default PixelGrid\n","import React from 'react'\nimport firebase from '../firebase.js'\n\nclass Chat extends React.Component {\n\n  state = {\n    username : null,\n    message: ''\n  }\n\n  handleChange = (e) => {\n    this.setState({ [e.target.name] : e.target.value })\n  }\n\n  onClick = (e) => {\n    firebase.database().ref('/username').push({\n      username: this.state.username,\n      message: this.state.message,\n      timestamp: firebase.database.ServerValue.TIMESTAMP\n    });\n  }\n\n  onSubmit = (e) => {\n    e.preventDefault()\n  }\n\n  testMessagesGet = () => {\n    firebase.database().ref('/username').once('value')\n    // .then( data => console.log( 'username', data.val().forEach() ) );\n      .then(function(snapshot) {\n        snapshot.forEach( snap => {\n          console.log(snap.val());\n        } )\n      })\n  }\n\n  render(){\n    return(\n      <div className='App'>\n        <h2>Chat</h2>\n        {\n          this.state.username ?\n          <p>{this.state.username}</p>\n          :\n          <div>\n            <form onSubmit={this.onSubmit} action=\"\">\n              <input type=\"text\" onChange={this.handleChange} name=\"username\"/>\n              <button name=\"username\" onClick={this.onClick}>enter username</button>\n            </form>\n          </div>\n        }\n        <input type=\"text\" onChange={this.handleChange} name=\"username\"/>\n        <button name=\"username\" onClick={this.onClick}>enter username</button>\n        {this.state.username} <br/>\n        <input type=\"text\" onChange={this.handleChange} name=\"message\"/>\n        <button onClick={this.onClick}> message </button> <br/>\n        <button onClick={this.testMessagesGet}>get messager/username</button>\n      </div>\n    )\n  }\n\n} // Class\n\nexport default Chat\n","import React from 'react'\nimport Webcam from 'react-webcam'\nimport firebase from '../firebase.js'\n\n\nclass WebcamPage extends React.Component {\n\n  state = {\n    image: ''\n  }\n\n  setRef = webcam => {\n      this.webcam = webcam;\n    };\n\n  capture = () => {\n    // const imageSrc = this.webcam.getCanvas();\n    const imageSrc = this.webcam.getScreenshot();\n    // console.log(imageSrc);\n    this.setState({ image: imageSrc })\n    // this.setState({ image: `<img src='${imageSrc}' />` })\n  };\n\n  takeAnother = () => {\n    this.setState({ image: null })\n  }\n\n  componentDidMount = () => {\n  }\n\n  // pixelate = () => {\n  //   var imgData = this.getImageData(0,0,w,h).data\n  //   var img = new Image();\n  //   img.src = this.state.image\n  //   let sample_size = 10\n  //   ctx.drawImage(img, 0, 0, w, h);\n  //   // loop through the rows from top to bottom\n  //   for (var y = 0; y < h; y+= sample_size) {\n  //     // loop through all the colomns from left to right\n  //     for (var x = 0; x < w; x+= sample_size) {\n  //       // do something\n  //       var pos = ( x + y * w ) * 4;\n  //       var red = sample[pos];\n  //       var green = sample[pos+1];\n  //       var blue = sample[pos+2];\n  //\n  //       ctx.fillStyle = rgb(red, green, blue)\n  //       ctx.fillRect = ( x, y, sample_size, sample_size )\n  //     }\n  //   }\n  // }\n\n  pixelate = () => {\n    firebase.database().ref('/grid').remove()\n    let c = this.refs.canvas\n    let ctx = c.getContext(\"2d\")\n    let img1 = this.refs.webcamImage\n    console.log('canvas', c);\n    console.log('ctx', ctx);\n    console.log('img1', img1);\n\n    let w = img1.width;\n    // console.log(w);\n    let h = img1.height;\n\n    c.width = w;\n    c.height = h;\n    ctx.drawImage(img1, 0, 0);\n\n    var pixelArr = ctx.getImageData(0, 0, w, h).data;\n    let sample_size = 1;\n\n    for (let y = 0; y < h; y += sample_size) {\n      for (let x = 0; x < w; x += sample_size) {\n        let p = (x + (y*w)) * 4;\n        ctx.fillStyle = \"rgba(\" + pixelArr[p] + \",\" + pixelArr[p + 1] + \",\" + pixelArr[p + 2] + \",\" + pixelArr[p + 3] + \")\";\n        ctx.fillRect(x, y, sample_size, sample_size);\n        this.firebaseSetPixel( x, y, ctx.fillStyle )\n        // console.log(x, y, ctx.fillStyle);\n\n      }\n    }\n    // for (let y = 0; y < h; y += sample_size) {\n    //   for (let x = 0; x < w; x += sample_size) {\n    //     let p = (x + y * w) * 4;\n    //     ctx.fillStyle = \"rgba(\" + pixelArr[p] + \",\" + pixelArr[p + 1] + \",\" + pixelArr[p + 2] + \",\" + pixelArr[p + 3] + \")\";\n    //     console.log(y, x, ctx.fillStyle)\n    //     // let pos = (x + y * w) * 4;\n    //     // let red   = pixelArr[pos];\n    //     // let green = pixelArr[pos + 1];\n    //     // let blue  = pixelArr[pos + 2];\n    //     // ctx.fillStyle = `rgb(${red}, ${blue}, ${green})`;\n    //     // ctx.fillRect(x, y, sample_size, sample_size);\n    //     // console.log('1');\n    //   }\n    // } // why doesn't color work?!\n  //\n  //   let img2 = new Image();\n  //   img2.src = c.toDataURL(\"image/jpeg\");\n  //   img2.width = 800;\n  //   document.body.appendChild(img2);\n  // };\n  // img1.src = document.getElementById(\"image1\").src;\n  }\n\n  firebaseSetPixel = (r, c, color) => {\n    console.log('sending to firebase');\n    firebase.database().ref(`/grid/${r}-${c}`).set({\n      row: r,\n      col: c,\n      color: color\n    });\n  }\n\n\n  render() {\n    const videoConstraints = {\n      width: 100,\n      height: 40,\n      facingMode: \"user\"\n    };\n\n    return (\n      <div>\n        <h2>take a photo</h2>\n        {\n          this.state.image ?\n          <div>\n          <br/>\n          <button onClick={this.takeAnother}>take another</button>\n          <button onClick={this.pixelate}>pixelate</button>\n          </div>\n          :\n          <div>\n          <Webcam\n            audio={false}\n            height={400}\n            ref={this.setRef}\n            screenshotFormat=\"image/jpeg\"\n            width={1000}\n            videoConstraints={videoConstraints}\n            minScreenshotHeight={40}\n            minScreenshotWidth={100}\n          />\n          <br/>\n          <button onClick={this.capture}>Capture photo</button>\n          <br/>\n          </div>\n        }\n        <canvas ref=\"canvas\" width={100} height={40} />\n        <img ref=\"webcamImage\" src={this.state.image} className=\"hidden\"/>\n      </div>\n    );\n  }\n} // Class\n\nexport default WebcamPage\n","import React from 'react'\n\nclass Pixelate extends React.Component {\n\n  // pixelate = () => {\n  //   let c = document.createElement(\"canvas\");\n  //   ctx = c.getContext('2d');\n  //   let img1 = new Image();\n  //\n  //   img1.onload = function () {\n  //     document.getElementById(\"image1\").remove();\n  //\n  //     w = img1.width;\n  //     h = img1.height;\n  //\n  //     c.width = w;\n  //     c.height = h;\n  //     ctx.drawImage(img1, 0, 0);\n  //\n  //     var pixelArr = ctx.getImageData(0, 0, w, h).data;\n  //     sample_size = 40;\n  //\n  //     for (let y = 0; y < h; y += sample_size) {\n  //       for (let x = 0; x < w; x += sample_size) {\n  //         let p = (x + (y*w)) * 4;\n  //         ctx.fillStyle = \"rgba(\" + pixelArr[p] + \",\" + pixelArr[p + 1] + \",\" + pixelArr[p + 2] + \",\" + pixelArr[p + 3] + \")\";\n  //         ctx.fillRect(x, y, sample_size, sample_size);\n  //       }\n  //     }\n  //\n  //     let img2 = new Image();\n  //     img2.src = c.toDataURL(\"image/jpeg\");\n  //     img2.width = 800;\n  //     document.body.appendChild(img2);\n  //   };\n  //   img1.src = document.getElementById(\"image1\").src;\n  // }\n\n\n  render(){\n    return(\n      <div className='App'>\n        <h2>Pixelate</h2>\n      </div>\n    )\n  }\n\n} // Class\n\nexport default Pixelate\n","import React from 'react'\n\nclass CanvasTest extends React.Component {\n\n  componentDidMount = () => {\n    console.log('hi');\n  }\n\n  clickOnCanvas = (e) => {\n    console.log(e.pageX);\n    console.log(e.offsetX);\n    console.log(e);\n  }\n\n  buttonClick = () => {\n    let c = this.refs.canvas\n    let ctx = c.getContext(\"2d\")\n    console.log(ctx);\n    console.log(`click`);\n  }\n\n  render(){\n    return(\n      <div className='App'>\n        <h2>Canvastest</h2>\n        <canvas\n          onClick={this.clickOnCanvas}\n          id=\"testCanvas\"\n          ref=\"canvas\"\n          width={200}\n          height={200}\n          ></canvas>\n        <button onClick={this.buttonClick}>hi</button>\n      </div>\n    )\n  }\n\n} // Class\n\nexport default CanvasTest\n","import React from 'react';\nimport './App.css';\nimport {\n  Route,\n  Link,\n  HashRouter as Router\n} from 'react-router-dom'\nimport PixelGrid from './components/PixelGrid'\nimport Chat from './components/Chat'\nimport WebcamPage from './components/WebcamPage'\nimport Pixelate from './components/Pixelate'\nimport CanvasTest from './components/CanvasTest'\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n    pixel\n    <Router>\n    <nav>\n      <Link to=\"/\">Home</Link> |&nbsp;\n      <Link to=\"/PixelGrid\">PixelGrid</Link> |&nbsp;\n      <Link to=\"/Chat\">Chat</Link> |&nbsp;\n      <Link to=\"/WebcamPage\">WebcamPage</Link> |&nbsp;\n      <Link to=\"/Pixelate\">Pixelate</Link> |&nbsp;\n      <Link to=\"/CanvasTest\">CanvasTest</Link> |&nbsp;\n    </nav>\n    <Route exact path=\"/PixelGrid\" component={PixelGrid} />\n    <Route exact path=\"/Chat\" component={Chat} />\n    <Route exact path=\"/WebcamPage\" component={WebcamPage} />\n    <Route exact path=\"/Pixelate\" component={Pixelate} />\n    <Route exact path=\"/CanvasTest\" component={CanvasTest} />\n    </Router>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}