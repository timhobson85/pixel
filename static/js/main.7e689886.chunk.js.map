{"version":3,"sources":["components/ColorPicker.js","firebase.js","components/WebcamPage.js","components/PixelGrid.js","components/Chat.js","components/Pixelate.js","components/CanvasTest.js","App.js","serviceWorker.js","index.js"],"names":["ColorPicker","state","displayColorPicker","color","props","disableAlpha","sendColorData","setState","hex","showColorPicker","className","id","style","backgroundColor","this","onClick","onChange","onChangeComplete","onMouseLeave","React","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","WebcamPage","image","setRef","webcam","capture","imageSrc","getScreenshot","takeAnother","componentDidMount","pixelate","console","log","database","ref","remove","c","refs","canvas","ctx","getContext","img1","webcamImage","w","width","h","height","drawImage","pixelArr","getImageData","data","y","x","p","fillStyle","fillRect","firebaseSetPixel","set","update","ServerValue","TIMESTAMP","r","row","col","audio","screenshotFormat","videoConstraints","facingMode","minScreenshotHeight","minScreenshotWidth","src","PixelGrid","mouseDown","firstDraw","paintClick","newImage","cloneDeep","splice","firebaseSetLastDraw","paintMouseOver","setMouseDown","setMouseUp","firebaseLastDrawListen","on","snapshot","val","firebasePaint","firebaseGridWasUpdatedListen","getPhotoFromFirebase","once","then","pixels","pix","Object","values","output","Array","fill","map","el","i","length","firebaseEmptyGrid","colorPickerData","j","paddingBottom","onMouseDown","onMouseOver","onMouseUp","Chat","username","message","handleChange","e","target","name","value","push","timestamp","onSubmit","preventDefault","testMessagesGet","forEach","snap","action","type","Pixelate","CanvasTest","clickOnCanvas","pageX","offsetX","buttonClick","App","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.7e689886.chunk.js","sourcesContent":["import React from 'react'\nimport { SketchPicker } from 'react-color';\nimport './ColorPicker.css'\n\n\nclass ColorPicker extends React.Component {\n\n  state = {\n    displayColorPicker: false,\n    color: this.props.color,\n    disableAlpha: true,\n  };\n\n  sendColorData = ( color ) => {\n    this.setState({ color : color.hex})\n    this.props.sendColorData(this.state.color)\n  }\n\n  showColorPicker = () => {\n    let displayColorPicker = this.state.displayColorPicker\n    this.setState({ displayColorPicker : !displayColorPicker })\n  }\n\n\n  render(){\n    return(\n      <div className='App'>\n        <button\n          id=\"colorPickerButton\"\n          style={{\n            backgroundColor:`${this.state.color}`\n          }}\n          onClick={this.showColorPicker}\n          >\n          {\n            this.state.displayColorPicker ?\n            'hide'\n            :\n            'pick a color'\n          }\n        </button>\n        {\n          this.state.displayColorPicker ?\n          <SketchPicker\n            color={this.state.color}\n            onChange={this.sendColorData}\n            onChangeComplete={ this.sendColorData}\n            disableAlpha={this.state.disableAlpha}\n            onMouseLeave={this.showColorPicker}\n          />\n          :\n          ''\n        }\n      </div>\n    )\n  }\n\n} // Class\n\nexport default ColorPicker\n","import firebase from 'firebase';\n\nconst config = {\n  apiKey: \"AIzaSyBCSiijuJoNKrO4nN5pYo2oXvMHQI92ohg\",\n  authDomain: \"pixel-54176.firebaseapp.com\",\n  databaseURL: \"https://pixel-54176.firebaseio.com\",\n  projectId: \"pixel-54176\",\n  storageBucket: \"pixel-54176.appspot.com\",\n  messagingSenderId: \"342090218102\",\n  appId: \"1:342090218102:web:75891e1b2670bca2693d57\",\n  measurementId: \"G-MF6VM6L27K\"\n};\nfirebase.initializeApp(config);\nexport default firebase;\n","import React from 'react'\nimport Webcam from 'react-webcam'\nimport firebase from '../firebase.js'\nimport './WebcamPage.css'\n\n\nclass WebcamPage extends React.Component {\n\n  state = {\n    image: ''\n  };\n\n  setRef = webcam => {\n    this.webcam = webcam;\n  };\n\n  capture = () => {\n    const imageSrc = this.webcam.getScreenshot();\n    this.setState({ image: imageSrc });\n  };\n\n  takeAnother = () => {\n    this.setState({ image: null })\n  };\n\n  componentDidMount = () => {\n  };\n\n  pixelate = () => {\n    console.log('clearing database');\n    firebase.database().ref('/grid').remove();\n    let c = this.refs.canvas;\n    let ctx = c.getContext(\"2d\");\n    let img1 = this.refs.webcamImage;\n    console.log('canvas', c);\n    console.log('ctx', ctx);\n    console.log('img1', img1);\n\n    let w = img1.width;\n    let h = img1.height;\n\n    c.width = w;\n    c.height = h;\n    ctx.drawImage(img1, 0, 0);\n\n    var pixelArr = ctx.getImageData(0, 0, w, h).data;\n    let sample_size = 1;\n\n    for (let y = 0; y < h; y += sample_size) {\n      for (let x = 0; x < w; x += sample_size) {\n        let p = (x + (y*w)) * 4;\n        ctx.fillStyle = \"rgba(\" + pixelArr[p] + \",\" + pixelArr[p + 1] + \",\" + pixelArr[p + 2] + \",\" + pixelArr[p + 3] + \")\";\n        ctx.fillRect(x, y, sample_size, sample_size);\n        this.firebaseSetPixel( x, y, ctx.fillStyle );\n        // console.log(x, y, ctx.fillStyle);\n\n      }\n    }\n    console.log('redraw grid here');\n    firebase.database().ref(`/gridWasUpdated`).set({\n      update: firebase.database.ServerValue.TIMESTAMP\n     });\n\n  }\n\n  firebaseSetPixel = (r, c, color) => {\n    console.log('sending to firebase');\n    firebase.database().ref(`/grid/${r}-${c}`).set({\n      row: r,\n      col: c,\n      color: color\n    });\n  }\n\n\n  render() {\n    const videoConstraints = {\n      width: 100,\n      height: 40,\n      facingMode: \"user\"\n    };\n\n    return (\n      <div>\n        <h2>take a photo</h2>\n        <div>\n        {\n          this.state.image ?\n          <div>\n          <br/>\n          <button onClick={this.takeAnother}>take another</button>\n          <button onClick={this.pixelate}>pixelate</button>\n          </div>\n          :\n          <div>\n          <Webcam\n            audio={false}\n            height={400}\n            ref={this.setRef}\n            screenshotFormat=\"image/jpeg\"\n            width={1000}\n            videoConstraints={videoConstraints}\n            minScreenshotHeight={40}\n            minScreenshotWidth={100}\n          />\n          <br/>\n          <button onClick={this.capture}>Capture photo</button>\n          <br/>\n          </div>\n        }\n        <canvas ref=\"canvas\" width={100} height={40} />\n        <img ref=\"webcamImage\" src={this.state.image} className=\"hidden\"/>\n        </div>\n      </div>\n\n    );\n  }\n} // Class\n\nexport default WebcamPage\n","import React from 'react'\nimport './PixelGrid.css';\nimport { cloneDeep } from 'lodash'\nimport ColorPicker from './ColorPicker'\nimport firebase from '../firebase.js'\nimport WebcamPage from './WebcamPage'\n\n\nclass PixelGrid extends React.Component {\n  state = {\n    image: [],\n    row: 40,\n    col: 100,\n    color: \"#000000\",\n    mouseDown: false,\n    firstDraw: true,\n  };\n\n  componentDidMount() {\n    this.firebaseLastDrawListen();\n    this.firebaseGridWasUpdatedListen()\n    this.getPhotoFromFirebase();\n  };\n\n  paintClick = (r, c) => {\n    // let newImage = [...this.state.image]; // this is a shallow copy - use deep copy with lodash\n    let newImage = cloneDeep(this.state.image);\n    newImage[r].splice(c, 1, this.state.color );\n    this.setState({\n      image: newImage\n    });\n    this.firebaseSetLastDraw( r, c );\n    this.firebaseSetPixel( r, c );\n  };\n\n  paintMouseOver = (r, c) => {\n    if (this.state.mouseDown) {\n      this.firebaseSetLastDraw( r, c, this.state.color);\n      this.firebaseSetPixel( r, c )\n      let newImage = cloneDeep(this.state.image);\n      newImage[r].splice(c, 1, this.state.color);\n      this.setState({\n        image: newImage\n      });\n    };\n  };\n\n  setMouseDown = (r, c) => {\n    let newImage = cloneDeep(this.state.image);\n    newImage[r].splice(c, 1, this.state.color );\n    this.firebaseSetLastDraw( r, c, this.state.color);\n    this.firebaseSetPixel( r, c );\n    this.setState({\n      image: newImage\n    });\n    this.setState({ mouseDown: true});\n  };\n\n  setMouseUp = () => {\n    this.setState({ mouseDown: false});\n  };\n\n  // firebaseSetPixel = (r, c, color) => {\n    // console.log('sending to firebase');\n    // firebase.database().ref(`/grid/${r}-${c}`).set({\n    //   row: r,\n    //   col: c,\n    //   color: color\n    // });\n  // }\n\n  firebaseSetLastDraw = (r, c) => {\n    firebase.database().ref('/lastDraw').set({\n      row: r,\n      col: c,\n      color: this.state.color\n    });\n  };\n\n  firebaseSetPixel = (c, r) => {\n    firebase.database().ref(`/grid/${r}-${c}`).set({\n      row: r,\n      col: c,\n      color: this.state.color\n    });\n  };\n\n  firebaseLastDrawListen = () => {\n    let listen = firebase.database().ref('/lastDraw');\n    listen.on('value', (snapshot) => {\n      let data = snapshot.val();\n      if (this.state.firstDraw === false) {\n        this.firebasePaint( data.row, data.col, data.color );\n      };\n      this.setState({ firstDraw: false });\n    });\n  };\n\n  firebaseGridWasUpdatedListen = () => {\n    let listen = firebase.database().ref('/gridWasUpdated');\n    listen.on('value', (snapshot) => {\n      let data = snapshot.val()\n      // console.log('firebaseListen', data.row, data.col);\n      // console.log(data);\n      this.getPhotoFromFirebase()\n    })\n  }\n\n  firebasePaint = ( r, c, color ) => {\n    let newImage = cloneDeep(this.state.image);\n    newImage[r].splice(c, 1, color )\n    this.setState({\n      image: newImage\n    });\n  };\n\n  getPhotoFromFirebase = () => {\n    console.log('hello');\n    firebase.database().ref('/grid').once('value')\n    // .then((pixels) => console.log(pixels.val()))\n    .then((pixels) => {\n      const pix = Object.values( pixels.val() );\n      const output = Array(40).fill(null).map( el => new Array(100) );\n      let rows = 40; let cols = 100;\n      for(let i = 0; i < pix.length; i++){\n        const {row, col, color} = pix[i];\n          output[col][row] = color;\n      };\n      this.setState({ image: output });\n    });\n  };\n\n  firebaseEmptyGrid = () => {\n    firebase.database().ref('/grid').remove();\n  };\n\n  colorPickerData = ( data ) => {\n    this.setState({ color : data});\n  };\n\n\n  render(){\n    const { image } = this.state;\n    return(\n      <div className='App'>\n        <h2>PixelCanvas02</h2>\n        {\n          this.state.image.length > 1 ?\n          <div\n            className=\"pixelGrid\"\n            onMouseLeave={this.setMouseUp}\n          >\n          {\n          image.map((row, i) => (\n            <div\n              className=\"row\"\n              style={{\n                height: `${100 / image[i].length}%`\n              }}\n              >\n              {\n                row.map( (color, j ) => (\n                  <div\n                    className=\"pixel\"\n                    style={{\n                      backgroundColor: image[i][j] || 'rgb(70, 70, 70)',\n                      width: `${100 / image[i].length}%`,\n                      paddingBottom: `${100 / image[i].length}%`\n                    }}\n                    onClick={() => this.paintClick(i, j)}\n                    onMouseDown={() => this.setMouseDown(i, j)}\n                    onMouseOver={() => this.paintMouseOver(i, j)}\n                    onMouseUp={this.setMouseUp}\n                    />)\n                  )\n                }\n              </div>\n            ))\n          }\n          </div>\n          :\n          <p>loading...</p>\n        }\n          <ColorPicker\n            color={this.state.color}\n            sendColorData={this.colorPickerData}\n          />\n        <br/>\n        <br/>\n      </div>\n    )\n  }\n} // Class\n\nexport default PixelGrid\n\n// row/col inputs\n// <h4>testinput</h4>\n// <label>row</label>\n// <input type=\"number\" min=\"1\" max=\"100\" name=\"row\" defaultValue={this.state.row} onChange={this.handleChangeSelect}/>\n// <label>col</label>\n// <input type=\"number\" min=\"1\" max=\"100\" name=\"col\" defaultValue={this.state.col} onChange={this.handleChangeSelect}/>\n// <h4>endtestinput</h4>\n// <label> row </label>\n// <input type=\"text\" name=\"row\" onChange={this.handleChange} /> <br/>\n// <label> col </label>\n// <input type=\"text\" name=\"col\" onChange={this.handleChange} /> <br/>\n// <button onClick={this.createGrid}>click</button> <br/>\n\n// handleChange = (e) => {\n//   this.setState({ [e.target.name] : e.target.value })\n// }\n//\n// handleChangeSelect = (e) => {\n//   console.log(this.state.row, this.state.col);\n//   this.setState({ [e.target.name] : e.target.value })\n//   let image = []\n//   for (var i = 0; i < this.state.row; i++) {\n//     image[i] = []\n//     for (var j = 0; j < this.state.col; j++) {\n//       image[i][j] =  null\n//     }\n//   }\n//   this.setState({ image })\n// }\n\n// createGrid = () => {\n//   console.log(this.state.row, this.state.col);\n//   let image = []\n//   for (var i = 0; i < this.state.row; i++) {\n//     image[i] = []\n//     for (var j = 0; j < this.state.col; j++) {\n//       image[i][j] =  null\n//       // this.firebaseSetPixel( i, j ) // this was to seed grid\n//     }\n//   }\n//   this.setState({ image })\n// }\n\n\n// click and drag draw handlers\n// onMouseDown={() => this.setMouseDown(i, j)}\n// onMouseOver={() => this.paintMouseOver(i, j)}\n// onMouseUp={this.setMouseUp}\n","import React from 'react'\nimport firebase from '../firebase.js'\n\nclass Chat extends React.Component {\n\n  state = {\n    username : null,\n    message: ''\n  }\n\n  handleChange = (e) => {\n    this.setState({ [e.target.name] : e.target.value })\n  }\n\n  onClick = (e) => {\n    firebase.database().ref('/username').push({\n      username: this.state.username,\n      message: this.state.message,\n      timestamp: firebase.database.ServerValue.TIMESTAMP\n    });\n  }\n\n  onSubmit = (e) => {\n    e.preventDefault()\n  }\n\n  testMessagesGet = () => {\n    firebase.database().ref('/username').once('value')\n    // .then( data => console.log( 'username', data.val().forEach() ) );\n      .then(function(snapshot) {\n        snapshot.forEach( snap => {\n          console.log(snap.val());\n        } )\n      })\n  }\n\n  render(){\n    return(\n      <div className='App'>\n        <h2>Chat</h2>\n        {\n          this.state.username ?\n          <p>{this.state.username}</p>\n          :\n          <div>\n            <form onSubmit={this.onSubmit} action=\"\">\n              <input type=\"text\" onChange={this.handleChange} name=\"username\"/>\n              <button name=\"username\" onClick={this.onClick}>enter username</button>\n            </form>\n          </div>\n        }\n        <input type=\"text\" onChange={this.handleChange} name=\"username\"/>\n        <button name=\"username\" onClick={this.onClick}>enter username</button>\n        {this.state.username} <br/>\n        <input type=\"text\" onChange={this.handleChange} name=\"message\"/>\n        <button onClick={this.onClick}> message </button> <br/>\n        <button onClick={this.testMessagesGet}>get messager/username</button>\n      </div>\n    )\n  }\n\n} // Class\n\nexport default Chat\n","import React from 'react'\n\nclass Pixelate extends React.Component {\n\n  // pixelate = () => {\n  //   let c = document.createElement(\"canvas\");\n  //   ctx = c.getContext('2d');\n  //   let img1 = new Image();\n  //\n  //   img1.onload = function () {\n  //     document.getElementById(\"image1\").remove();\n  //\n  //     w = img1.width;\n  //     h = img1.height;\n  //\n  //     c.width = w;\n  //     c.height = h;\n  //     ctx.drawImage(img1, 0, 0);\n  //\n  //     var pixelArr = ctx.getImageData(0, 0, w, h).data;\n  //     sample_size = 40;\n  //\n  //     for (let y = 0; y < h; y += sample_size) {\n  //       for (let x = 0; x < w; x += sample_size) {\n  //         let p = (x + (y*w)) * 4;\n  //         ctx.fillStyle = \"rgba(\" + pixelArr[p] + \",\" + pixelArr[p + 1] + \",\" + pixelArr[p + 2] + \",\" + pixelArr[p + 3] + \")\";\n  //         ctx.fillRect(x, y, sample_size, sample_size);\n  //       }\n  //     }\n  //\n  //     let img2 = new Image();\n  //     img2.src = c.toDataURL(\"image/jpeg\");\n  //     img2.width = 800;\n  //     document.body.appendChild(img2);\n  //   };\n  //   img1.src = document.getElementById(\"image1\").src;\n  // }\n\n\n  render(){\n    return(\n      <div className='App'>\n        <h2>Pixelate</h2>\n      </div>\n    )\n  }\n\n} // Class\n\nexport default Pixelate\n","import React from 'react'\n\nclass CanvasTest extends React.Component {\n\n  componentDidMount = () => {\n    console.log('hi');\n  }\n\n  clickOnCanvas = (e) => {\n    console.log(e.pageX);\n    console.log(e.offsetX);\n    console.log(e);\n  }\n\n  buttonClick = () => {\n    let c = this.refs.canvas\n    let ctx = c.getContext(\"2d\")\n    console.log(ctx);\n    console.log(`click`);\n  }\n\n  render(){\n    return(\n      <div className='App'>\n        <h2>Canvastest</h2>\n        <canvas\n          onClick={this.clickOnCanvas}\n          id=\"testCanvas\"\n          ref=\"canvas\"\n          width={200}\n          height={200}\n          ></canvas>\n        <button onClick={this.buttonClick}>hi</button>\n      </div>\n    )\n  }\n\n} // Class\n\nexport default CanvasTest\n","import React from 'react';\nimport './App.css';\nimport {\n  Route,\n  Link,\n  HashRouter as Router\n} from 'react-router-dom'\nimport PixelGrid from './components/PixelGrid'\nimport Chat from './components/Chat'\nimport WebcamPage from './components/WebcamPage'\nimport Pixelate from './components/Pixelate'\nimport CanvasTest from './components/CanvasTest'\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n    <Router>\n    <nav>\n      <Link to=\"/\">Home</Link> |&nbsp;\n      <Link to=\"/PixelGrid\">PixelGrid</Link> |&nbsp;\n      <Link to=\"/Chat\">Chat</Link> |&nbsp;\n      <Link to=\"/WebcamPage\">WebcamPage</Link> |&nbsp;\n      <Link to=\"/Pixelate\">Pixelate</Link> |&nbsp;\n      <Link to=\"/CanvasTest\">CanvasTest</Link> |&nbsp;\n    </nav>\n    <Route exact path=\"/PixelGrid\" component={PixelGrid} />\n    <Route exact path=\"/Chat\" component={Chat} />\n    <Route exact path=\"/WebcamPage\" component={WebcamPage} />\n    <Route exact path=\"/Pixelate\" component={Pixelate} />\n    <Route exact path=\"/CanvasTest\" component={CanvasTest} />\n    </Router>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}